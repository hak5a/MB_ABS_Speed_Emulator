
MB_ABS_Speed_Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  0800300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000198  20000068  08003074  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000200  08003074  00020200  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   00004f8b  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001243a  00000000  00000000  0002501c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002587  00000000  00000000  00037456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000910  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b90  00000000  00000000  0003a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000063cd  00000000  00000000  0003ae80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003701  00000000  00000000  0004124d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004494e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021d0  00000000  00000000  000449cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f0c 	.word	0x08002f0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f0c 	.word	0x08002f0c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000648:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800064a:	e003      	b.n	8000654 <LoopCopyDataInit>

0800064c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800064e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000650:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000652:	3104      	adds	r1, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000658:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800065a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800065c:	d3f6      	bcc.n	800064c <CopyDataInit>
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000660:	e002      	b.n	8000668 <LoopFillZerobss>

08000662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000664:	f842 3b04 	str.w	r3, [r2], #4

08000668 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800066a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800066c:	d3f9      	bcc.n	8000662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066e:	f000 fb49 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000672:	f001 fd1b 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f000 f851 	bl	800071c <main>
  bx lr
 800067a:	4770      	bx	lr
  ldr r3, =_sidata
 800067c:	0800300c 	.word	0x0800300c
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000684:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000688:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 800068c:	20000200 	.word	0x20000200

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000694:	b507      	push	{r0, r1, r2, lr}
 8000696:	a902      	add	r1, sp, #8
 8000698:	f841 0d04 	str.w	r0, [r1, #-4]!
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800069c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a0:	2201      	movs	r2, #1
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <__io_putchar+0x1c>)
 80006a4:	f001 fb58 	bl	8001d58 <HAL_UART_Transmit>
  return ch;
}
 80006a8:	9801      	ldr	r0, [sp, #4]
 80006aa:	b003      	add	sp, #12
 80006ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80006b0:	20000138 	.word	0x20000138

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b6:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006bc:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2402      	movs	r4, #2
{
 80006c0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ca:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80006d0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f000 fd19 	bl	8001108 <HAL_RCC_OscConfig>
 80006d6:	4601      	mov	r1, r0
 80006d8:	b100      	cbz	r0, 80006dc <SystemClock_Config+0x28>
 80006da:	e7fe      	b.n	80006da <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	f000 fed7 	bl	800149c <HAL_RCC_ClockConfig>
 80006ee:	4604      	mov	r4, r0
 80006f0:	b100      	cbz	r0, 80006f4 <SystemClock_Config+0x40>
 80006f2:	e7fe      	b.n	80006f2 <SystemClock_Config+0x3e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80006f4:	f000 ff76 	bl	80015e4 <HAL_RCC_GetHCLKFreq>
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000700:	f000 fbac 	bl	8000e5c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000704:	2004      	movs	r0, #4
 8000706:	f000 fbbf 	bl	8000e88 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800070a:	4622      	mov	r2, r4
 800070c:	4621      	mov	r1, r4
 800070e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000712:	f000 fb63 	bl	8000ddc <HAL_NVIC_SetPriority>
}
 8000716:	b010      	add	sp, #64	; 0x40
 8000718:	bd10      	pop	{r4, pc}
	...

0800071c <main>:
{
 800071c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000720:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8000722:	f000 fb29 	bl	8000d78 <HAL_Init>
  SystemClock_Config();
 8000726:	f7ff ffc5 	bl	80006b4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b80      	ldr	r3, [pc, #512]	; (800092c <main+0x210>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 8000732:	487f      	ldr	r0, [pc, #508]	; (8000930 <main+0x214>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	f042 0210 	orr.w	r2, r2, #16
 8000738:	619a      	str	r2, [r3, #24]
 800073a:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 9600;
 800073c:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	f002 0210 	and.w	r2, r2, #16
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	f042 0220 	orr.w	r2, r2, #32
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	f002 0220 	and.w	r2, r2, #32
 8000756:	9202      	str	r2, [sp, #8]
 8000758:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	f042 0204 	orr.w	r2, r2, #4
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	9303      	str	r3, [sp, #12]
 800076c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 800076e:	f000 fcc5 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GreenLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GreenLED_GPIO_Port, &GPIO_InitStruct);
 800077e:	486c      	ldr	r0, [pc, #432]	; (8000930 <main+0x214>)
 8000780:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(GreenLED_GPIO_Port, &GPIO_InitStruct);
 8000784:	f000 fbda 	bl	8000f3c <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8000788:	486a      	ldr	r0, [pc, #424]	; (8000934 <main+0x218>)
  huart1.Init.BaudRate = 9600;
 800078a:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <main+0x21c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 800078e:	e880 0028 	stmia.w	r0, {r3, r5}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800079e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a0:	f001 faac 	bl	8001cfc <HAL_UART_Init>
 80007a4:	b100      	cbz	r0, 80007a8 <main+0x8c>
 80007a6:	e7fe      	b.n	80007a6 <main+0x8a>
  htim3.Init.Prescaler = 16000;
 80007a8:	f44f 5a7a 	mov.w	sl, #16000	; 0x3e80
  htim3.Init.Period = 1000;
 80007ac:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  htim3.Instance = TIM3;
 80007b0:	4c62      	ldr	r4, [pc, #392]	; (800093c <main+0x220>)
  htim3.Init.Prescaler = 16000;
 80007b2:	4b63      	ldr	r3, [pc, #396]	; (8000940 <main+0x224>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ba:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 16000;
 80007bc:	e884 0408 	stmia.w	r4, {r3, sl}
  htim3.Init.Period = 1000;
 80007c0:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007c4:	f001 f89a 	bl	80018fc <HAL_TIM_Base_Init>
 80007c8:	4627      	mov	r7, r4
 80007ca:	b100      	cbz	r0, 80007ce <main+0xb2>
 80007cc:	e7fe      	b.n	80007cc <main+0xb0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80007d2:	ad18      	add	r5, sp, #96	; 0x60
 80007d4:	f845 8d38 	str.w	r8, [r5, #-56]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007d8:	4629      	mov	r1, r5
 80007da:	4620      	mov	r0, r4
 80007dc:	f000 ff9d 	bl	800171a <HAL_TIM_ConfigClockSource>
 80007e0:	b100      	cbz	r0, 80007e4 <main+0xc8>
 80007e2:	e7fe      	b.n	80007e2 <main+0xc6>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e4:	4620      	mov	r0, r4
 80007e6:	f001 f8a3 	bl	8001930 <HAL_TIM_PWM_Init>
 80007ea:	b100      	cbz	r0, 80007ee <main+0xd2>
 80007ec:	e7fe      	b.n	80007ec <main+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f2:	a906      	add	r1, sp, #24
 80007f4:	4620      	mov	r0, r4
 80007f6:	f001 f98b 	bl	8001b10 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4602      	mov	r2, r0
 80007fc:	b100      	cbz	r0, 8000800 <main+0xe4>
 80007fe:	e7fe      	b.n	80007fe <main+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = 500;
 8000804:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	a911      	add	r1, sp, #68	; 0x44
 800080e:	4620      	mov	r0, r4
  sConfigOC.Pulse = 500;
 8000810:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	f001 f8d3 	bl	80019bc <HAL_TIM_PWM_ConfigChannel>
 8000816:	4606      	mov	r6, r0
 8000818:	b100      	cbz	r0, 800081c <main+0x100>
 800081a:	e7fe      	b.n	800081a <main+0xfe>
  HAL_TIM_MspPostInit(&htim3);
 800081c:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800081e:	4c49      	ldr	r4, [pc, #292]	; (8000944 <main+0x228>)
  HAL_TIM_MspPostInit(&htim3);
 8000820:	f000 f9c2 	bl	8000ba8 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 8000824:	4b48      	ldr	r3, [pc, #288]	; (8000948 <main+0x22c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000826:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	60a6      	str	r6, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800082c:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	61a6      	str	r6, [r4, #24]
  htim1.Init.Prescaler = 16000;
 8000830:	e884 0408 	stmia.w	r4, {r3, sl}
  htim1.Init.Period = 1000;
 8000834:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000838:	f001 f860 	bl	80018fc <HAL_TIM_Base_Init>
 800083c:	4626      	mov	r6, r4
 800083e:	b100      	cbz	r0, 8000842 <main+0x126>
 8000840:	e7fe      	b.n	8000840 <main+0x124>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000842:	a906      	add	r1, sp, #24
 8000844:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000846:	f8cd 8018 	str.w	r8, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800084a:	f000 ff66 	bl	800171a <HAL_TIM_ConfigClockSource>
 800084e:	b100      	cbz	r0, 8000852 <main+0x136>
 8000850:	e7fe      	b.n	8000850 <main+0x134>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000852:	4620      	mov	r0, r4
 8000854:	f001 f86c 	bl	8001930 <HAL_TIM_PWM_Init>
 8000858:	b100      	cbz	r0, 800085c <main+0x140>
 800085a:	e7fe      	b.n	800085a <main+0x13e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000860:	a904      	add	r1, sp, #16
 8000862:	4620      	mov	r0, r4
 8000864:	f001 f954 	bl	8001b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	b100      	cbz	r0, 800086c <main+0x150>
 800086a:	e7fe      	b.n	800086a <main+0x14e>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086c:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	f04f 0960 	mov.w	r9, #96	; 0x60
  sConfigOC.Pulse = 500;
 8000872:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	4629      	mov	r1, r5
 8000878:	4832      	ldr	r0, [pc, #200]	; (8000944 <main+0x228>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  sConfigOC.Pulse = 500;
 800087e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000882:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000884:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000886:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000888:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088a:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088c:	f001 f896 	bl	80019bc <HAL_TIM_PWM_ConfigChannel>
 8000890:	b100      	cbz	r0, 8000894 <main+0x178>
 8000892:	e7fe      	b.n	8000892 <main+0x176>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000898:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089a:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089c:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 800089e:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a0:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a2:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a4:	a911      	add	r1, sp, #68	; 0x44
 80008a6:	4827      	ldr	r0, [pc, #156]	; (8000944 <main+0x228>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008aa:	f001 f90b 	bl	8001ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ae:	4682      	mov	sl, r0
 80008b0:	b100      	cbz	r0, 80008b4 <main+0x198>
 80008b2:	e7fe      	b.n	80008b2 <main+0x196>
  HAL_TIM_MspPostInit(&htim1);
 80008b4:	4823      	ldr	r0, [pc, #140]	; (8000944 <main+0x228>)
 80008b6:	f000 f977 	bl	8000ba8 <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = 16000;
 80008ba:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80008c2:	4c22      	ldr	r4, [pc, #136]	; (800094c <main+0x230>)
  htim2.Init.Prescaler = 16000;
 80008c4:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 1000;
 80008c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008cc:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	f8c4 a008 	str.w	sl, [r4, #8]
  htim2.Init.Period = 1000;
 80008d2:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	f8c4 a010 	str.w	sl, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008dc:	f001 f80e 	bl	80018fc <HAL_TIM_Base_Init>
 80008e0:	b100      	cbz	r0, 80008e4 <main+0x1c8>
 80008e2:	e7fe      	b.n	80008e2 <main+0x1c6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e8:	4629      	mov	r1, r5
 80008ea:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ee:	f000 ff14 	bl	800171a <HAL_TIM_ConfigClockSource>
 80008f2:	b100      	cbz	r0, 80008f6 <main+0x1da>
 80008f4:	e7fe      	b.n	80008f4 <main+0x1d8>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f6:	4620      	mov	r0, r4
 80008f8:	f001 f81a 	bl	8001930 <HAL_TIM_PWM_Init>
 80008fc:	b100      	cbz	r0, 8000900 <main+0x1e4>
 80008fe:	e7fe      	b.n	80008fe <main+0x1e2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000904:	a906      	add	r1, sp, #24
 8000906:	4620      	mov	r0, r4
 8000908:	f001 f902 	bl	8001b10 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4602      	mov	r2, r0
 800090e:	b100      	cbz	r0, 8000912 <main+0x1f6>
 8000910:	e7fe      	b.n	8000910 <main+0x1f4>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000916:	a911      	add	r1, sp, #68	; 0x44
 8000918:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfigOC.Pulse = 500;
 800091e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	f001 f84b 	bl	80019bc <HAL_TIM_PWM_ConfigChannel>
 8000926:	4605      	mov	r5, r0
 8000928:	b190      	cbz	r0, 8000950 <main+0x234>
 800092a:	e7fe      	b.n	800092a <main+0x20e>
 800092c:	40021000 	.word	0x40021000
 8000930:	40011000 	.word	0x40011000
 8000934:	20000138 	.word	0x20000138
 8000938:	40013800 	.word	0x40013800
 800093c:	200000a8 	.word	0x200000a8
 8000940:	40000400 	.word	0x40000400
 8000944:	20000178 	.word	0x20000178
 8000948:	40012c00 	.word	0x40012c00
 800094c:	200001b8 	.word	0x200001b8
  HAL_TIM_MspPostInit(&htim2);
 8000950:	4620      	mov	r0, r4
 8000952:	f000 f929 	bl	8000ba8 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000956:	4629      	mov	r1, r5
 8000958:	4844      	ldr	r0, [pc, #272]	; (8000a6c <main+0x350>)
 800095a:	f001 f89d 	bl	8001a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800095e:	4629      	mov	r1, r5
 8000960:	4620      	mov	r0, r4
 8000962:	f001 f899 	bl	8001a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000966:	4629      	mov	r1, r5
 8000968:	4841      	ldr	r0, [pc, #260]	; (8000a70 <main+0x354>)
 800096a:	f001 f895 	bl	8001a98 <HAL_TIM_PWM_Start>
  uint32_t f_Sys_Clock = HAL_RCC_GetSysClockFreq();
 800096e:	f000 fd57 	bl	8001420 <HAL_RCC_GetSysClockFreq>
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 8000972:	f7ff fca1 	bl	80002b8 <__aeabi_ui2f>
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8000976:	683d      	ldr	r5, [r7, #0]
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 8000978:	4607      	mov	r7, r0
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim3);
 800097a:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);	// Led on
 800097e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000aa8 <main+0x38c>
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 8000982:	4640      	mov	r0, r8
 8000984:	f7ff fc98 	bl	80002b8 <__aeabi_ui2f>
 8000988:	4601      	mov	r1, r0
 800098a:	4638      	mov	r0, r7
 800098c:	f7ff fda0 	bl	80004d0 <__aeabi_fdiv>
 8000990:	4938      	ldr	r1, [pc, #224]	; (8000a74 <main+0x358>)
 8000992:	4607      	mov	r7, r0
 8000994:	f7ff fd9c 	bl	80004d0 <__aeabi_fdiv>
 8000998:	f7ff fe36 	bl	8000608 <__aeabi_f2uiz>
  __HAL_TIM_SET_PRESCALER(&htim1, ps);
 800099c:	6833      	ldr	r3, [r6, #0]
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 800099e:	4936      	ldr	r1, [pc, #216]	; (8000a78 <main+0x35c>)
  __HAL_TIM_SET_PRESCALER(&htim1, ps);
 80009a0:	6298      	str	r0, [r3, #40]	; 0x28
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 80009a2:	4638      	mov	r0, r7
 80009a4:	f7ff fd94 	bl	80004d0 <__aeabi_fdiv>
 80009a8:	f7ff fe2e 	bl	8000608 <__aeabi_f2uiz>
  __HAL_TIM_SET_PRESCALER(&htim2, ps);
 80009ac:	6823      	ldr	r3, [r4, #0]
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 80009ae:	4933      	ldr	r1, [pc, #204]	; (8000a7c <main+0x360>)
  __HAL_TIM_SET_PRESCALER(&htim2, ps);
 80009b0:	6298      	str	r0, [r3, #40]	; 0x28
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 80009b2:	4638      	mov	r0, r7
 80009b4:	f7ff fd8c 	bl	80004d0 <__aeabi_fdiv>
	  if( LED_State == 0 && ( (time_now - time_led_off) >= 900 ) )
 80009b8:	4f31      	ldr	r7, [pc, #196]	; (8000a80 <main+0x364>)
  ps = (uint32_t)( (float)f_Sys_Clock / (float)period / f );
 80009ba:	f7ff fe25 	bl	8000608 <__aeabi_f2uiz>
 80009be:	46b8      	mov	r8, r7
  __HAL_TIM_SET_PRESCALER(&htim3, ps);
 80009c0:	62a8      	str	r0, [r5, #40]	; 0x28
	  uint32_t time_now = HAL_GetTick();
 80009c2:	f000 f9f3 	bl	8000dac <HAL_GetTick>
	  if( LED_State == 0 && ( (time_now - time_led_off) >= 900 ) )
 80009c6:	783a      	ldrb	r2, [r7, #0]
	  uint32_t time_now = HAL_GetTick();
 80009c8:	4604      	mov	r4, r0
	  if( LED_State == 0 && ( (time_now - time_led_off) >= 900 ) )
 80009ca:	b972      	cbnz	r2, 80009ea <main+0x2ce>
 80009cc:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <main+0x368>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1ac3      	subs	r3, r0, r3
 80009d2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80009d6:	d308      	bcc.n	80009ea <main+0x2ce>
		  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);	// Led on
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	4648      	mov	r0, r9
 80009de:	f000 fb8d 	bl	80010fc <HAL_GPIO_WritePin>
		  time_led_on = time_now;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <main+0x36c>)
 80009e4:	601c      	str	r4, [r3, #0]
		  LED_State = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	703b      	strb	r3, [r7, #0]
	  if( LED_State == 1 && ( (time_now - time_led_on) >= 100 ) )
 80009ea:	f898 2000 	ldrb.w	r2, [r8]
 80009ee:	2a01      	cmp	r2, #1
 80009f0:	d10e      	bne.n	8000a10 <main+0x2f4>
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <main+0x36c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1ae3      	subs	r3, r4, r3
 80009f8:	2b63      	cmp	r3, #99	; 0x63
 80009fa:	d909      	bls.n	8000a10 <main+0x2f4>
		  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_SET);	// Led off
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	4648      	mov	r0, r9
 8000a02:	f000 fb7b 	bl	80010fc <HAL_GPIO_WritePin>
		  time_led_off = time_now;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <main+0x368>)
 8000a08:	601c      	str	r4, [r3, #0]
		  LED_State = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f888 3000 	strb.w	r3, [r8]
	  if( HAL_UART_Receive (&huart1, (uint8_t *)&rx_c, 1, 10) == HAL_OK )
 8000a10:	f8df a098 	ldr.w	sl, [pc, #152]	; 8000aac <main+0x390>
 8000a14:	230a      	movs	r3, #10
 8000a16:	2201      	movs	r2, #1
 8000a18:	4651      	mov	r1, sl
 8000a1a:	481c      	ldr	r0, [pc, #112]	; (8000a8c <main+0x370>)
 8000a1c:	f001 f9f8 	bl	8001e10 <HAL_UART_Receive>
 8000a20:	4606      	mov	r6, r0
 8000a22:	b988      	cbnz	r0, 8000a48 <main+0x32c>
		  if(rx_command_buffer_i < COMMAND_BUFFER_SIZE)
 8000a24:	4d1a      	ldr	r5, [pc, #104]	; (8000a90 <main+0x374>)
 8000a26:	782a      	ldrb	r2, [r5, #0]
 8000a28:	2a4f      	cmp	r2, #79	; 0x4f
 8000a2a:	d80c      	bhi.n	8000a46 <main+0x32a>
			  rx_command_buffer[rx_command_buffer_i++] = rx_c;
 8000a2c:	f89a 0000 	ldrb.w	r0, [sl]
 8000a30:	1c53      	adds	r3, r2, #1
 8000a32:	4918      	ldr	r1, [pc, #96]	; (8000a94 <main+0x378>)
 8000a34:	b2db      	uxtb	r3, r3
			  if(rx_c == '\n')
 8000a36:	280a      	cmp	r0, #10
			  rx_command_buffer[rx_command_buffer_i++] = rx_c;
 8000a38:	702b      	strb	r3, [r5, #0]
 8000a3a:	5488      	strb	r0, [r1, r2]
			  if(rx_c == '\n')
 8000a3c:	d104      	bne.n	8000a48 <main+0x32c>
				  printf("Command: %s", rx_command_buffer);
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <main+0x37c>)
				  rx_command_buffer[rx_command_buffer_i] = 0;
 8000a40:	54ce      	strb	r6, [r1, r3]
				  printf("Command: %s", rx_command_buffer);
 8000a42:	f001 fb5f 	bl	8002104 <iprintf>
			  rx_command_buffer_i = 0;
 8000a46:	702e      	strb	r6, [r5, #0]
	  if( (time_now - time_hello) >= 10000 )
 8000a48:	f242 710f 	movw	r1, #9999	; 0x270f
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <main+0x380>)
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	1ae3      	subs	r3, r4, r3
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d9b5      	bls.n	80009c2 <main+0x2a6>
		  printf("Uptime: %u sec\n\r", 10 * ++uptime);
 8000a56:	210a      	movs	r1, #10
		  time_hello = time_now;
 8000a58:	6014      	str	r4, [r2, #0]
		  printf("Uptime: %u sec\n\r", 10 * ++uptime);
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <main+0x384>)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <main+0x388>)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4359      	muls	r1, r3
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	f001 fb4d 	bl	8002104 <iprintf>
 8000a6a:	e7aa      	b.n	80009c2 <main+0x2a6>
 8000a6c:	20000178 	.word	0x20000178
 8000a70:	200000a8 	.word	0x200000a8
 8000a74:	3fd8661c 	.word	0x3fd8661c
 8000a78:	404dd7c2 	.word	0x404dd7c2
 8000a7c:	40c89096 	.word	0x40c89096
 8000a80:	20000084 	.word	0x20000084
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	20000090 	.word	0x20000090
 8000a8c:	20000138 	.word	0x20000138
 8000a90:	20000085 	.word	0x20000085
 8000a94:	200000e8 	.word	0x200000e8
 8000a98:	08002f34 	.word	0x08002f34
 8000a9c:	20000088 	.word	0x20000088
 8000aa0:	20000094 	.word	0x20000094
 8000aa4:	08002f40 	.word	0x08002f40
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	200000a4 	.word	0x200000a4

08000ab0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <HAL_MspInit+0x88>)
{
 8000ab2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab8:	f042 0201 	orr.w	r2, r2, #1
 8000abc:	619a      	str	r2, [r3, #24]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	f000 f976 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f06f 000b 	mvn.w	r0, #11
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	f000 f982 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f06f 000a 	mvn.w	r0, #10
 8000ade:	4611      	mov	r1, r2
 8000ae0:	f000 f97c 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f06f 0009 	mvn.w	r0, #9
 8000aea:	4611      	mov	r1, r2
 8000aec:	f000 f976 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f06f 0004 	mvn.w	r0, #4
 8000af6:	4611      	mov	r1, r2
 8000af8:	f000 f970 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f06f 0003 	mvn.w	r0, #3
 8000b02:	4611      	mov	r1, r2
 8000b04:	f000 f96a 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f06f 0001 	mvn.w	r0, #1
 8000b0e:	4611      	mov	r1, r2
 8000b10:	f000 f964 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	f000 f95e 	bl	8000ddc <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x8c>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000b30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	b003      	add	sp, #12
 8000b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000

08000b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8000b40:	6803      	ldr	r3, [r0, #0]
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <HAL_TIM_Base_MspInit+0x5c>)
{
 8000b44:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10b      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_TIM_Base_MspInit+0x60>)
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b52:	619a      	str	r2, [r3, #24]
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b5e:	b004      	add	sp, #16
 8000b60:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8000b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b66:	d10b      	bne.n	8000b80 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b6c:	69da      	ldr	r2, [r3, #28]
 8000b6e:	f042 0201 	orr.w	r2, r2, #1
 8000b72:	61da      	str	r2, [r3, #28]
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	9b02      	ldr	r3, [sp, #8]
 8000b7e:	e7ee      	b.n	8000b5e <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_TIM_Base_MspInit+0x64>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d1eb      	bne.n	8000b5e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_TIM_Base_MspInit+0x60>)
 8000b88:	69da      	ldr	r2, [r3, #28]
 8000b8a:	f042 0202 	orr.w	r2, r2, #2
 8000b8e:	61da      	str	r2, [r3, #28]
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	9303      	str	r3, [sp, #12]
 8000b98:	9b03      	ldr	r3, [sp, #12]
}
 8000b9a:	e7e0      	b.n	8000b5e <HAL_TIM_Base_MspInit+0x1e>
 8000b9c:	40012c00 	.word	0x40012c00
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40000400 	.word	0x40000400

08000ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8000baa:	6803      	ldr	r3, [r0, #0]
 8000bac:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <HAL_TIM_MspPostInit+0x38>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10c      	bne.n	8000bcc <HAL_TIM_MspPostInit+0x24>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = PWM_FL_Pin;
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = PWM_Diff_Pin;
 8000bb6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(PWM_Diff_GPIO_Port, &GPIO_InitStruct);
 8000bba:	4669      	mov	r1, sp
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_TIM_MspPostInit+0x3c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(PWM_Diff_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f000 f9bb 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bc6:	b005      	add	sp, #20
 8000bc8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM2)
 8000bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd0:	d101      	bne.n	8000bd6 <HAL_TIM_MspPostInit+0x2e>
    GPIO_InitStruct.Pin = PWM_FR_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e7ef      	b.n	8000bb6 <HAL_TIM_MspPostInit+0xe>
  else if(htim->Instance==TIM3)
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_TIM_MspPostInit+0x40>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d1f4      	bne.n	8000bc6 <HAL_TIM_MspPostInit+0x1e>
    GPIO_InitStruct.Pin = PWM_Diff_Pin;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	e7ea      	b.n	8000bb6 <HAL_TIM_MspPostInit+0xe>
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40000400 	.word	0x40000400

08000bec <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000bee:	6802      	ldr	r2, [r0, #0]
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_UART_MspInit+0x60>)
{
 8000bf2:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d127      	bne.n	8000c48 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000bfc:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c16:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f000 f98b 	bl	8000f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	a902      	add	r1, sp, #8
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f000 f982 	bl	8000f3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c38:	2025      	movs	r0, #37	; 0x25
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f000 f8cd 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c42:	2025      	movs	r0, #37	; 0x25
 8000c44:	f000 f8fe 	bl	8000e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd10      	pop	{r4, pc}
 8000c4c:	40013800 	.word	0x40013800
 8000c50:	40010800 	.word	0x40010800

08000c54 <NMI_Handler>:
 8000c54:	4770      	bx	lr

08000c56 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler>

08000c58 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler>

08000c5a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler>

08000c5c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler>

08000c5e <SVC_Handler>:
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f899 	bl	8000d9c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000c6e:	f000 b918 	b.w	8000ea2 <HAL_SYSTICK_IRQHandler>
	...

08000c74 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c74:	4801      	ldr	r0, [pc, #4]	; (8000c7c <USART1_IRQHandler+0x8>)
 8000c76:	f001 b96b 	b.w	8001f50 <HAL_UART_IRQHandler>
 8000c7a:	bf00      	nop
 8000c7c:	20000138 	.word	0x20000138

08000c80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	460e      	mov	r6, r1
 8000c84:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	460c      	mov	r4, r1
 8000c88:	1ba3      	subs	r3, r4, r6
 8000c8a:	429d      	cmp	r5, r3
 8000c8c:	dc01      	bgt.n	8000c92 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000c8e:	4628      	mov	r0, r5
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000c92:	f3af 8000 	nop.w
 8000c96:	f804 0b01 	strb.w	r0, [r4], #1
 8000c9a:	e7f5      	b.n	8000c88 <_read+0x8>

08000c9c <_write>:

int _write(int file, char *ptr, int len)
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	460e      	mov	r6, r1
 8000ca0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	1ba3      	subs	r3, r4, r6
 8000ca6:	429d      	cmp	r5, r3
 8000ca8:	dc01      	bgt.n	8000cae <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000caa:	4628      	mov	r0, r5
 8000cac:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000cae:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000cb2:	f7ff fcef 	bl	8000694 <__io_putchar>
 8000cb6:	e7f5      	b.n	8000ca4 <_write+0x8>

08000cb8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000cb8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <_sbrk+0x2c>)
{
 8000cbc:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	b909      	cbnz	r1, 8000cc6 <_sbrk+0xe>
		heap_end = &end;
 8000cc2:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <_sbrk+0x30>)
 8000cc4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000cc6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000cc8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000cca:	4402      	add	r2, r0
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	d906      	bls.n	8000cde <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000cd0:	f001 f9e6 	bl	80020a0 <__errno>
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000cde:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000ce0:	bd08      	pop	{r3, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000098 	.word	0x20000098
 8000ce8:	20000200 	.word	0x20000200

08000cec <_close>:

int _close(int file)
{
	return -1;
}
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf0:	4770      	bx	lr

08000cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000cf6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000cf8:	604b      	str	r3, [r1, #4]
}
 8000cfa:	4770      	bx	lr

08000cfc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4770      	bx	lr

08000d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	4770      	bx	lr

08000d04 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <SystemInit+0x40>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f042 0201 	orr.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d0e:	6859      	ldr	r1, [r3, #4]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <SystemInit+0x44>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d20:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d28:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000d30:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d32:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d36:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SystemInit+0x48>)
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	f8ff0000 	.word	0xf8ff0000
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_InitTick+0x24>)
{
 8000d52:	b510      	push	{r4, lr}
 8000d54:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d60:	f000 f87c 	bl	8000e5c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	4621      	mov	r1, r4
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f000 f836 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000d70:	2000      	movs	r0, #0
 8000d72:	bd10      	pop	{r4, pc}
 8000d74:	20000000 	.word	0x20000000

08000d78 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x20>)
{
 8000d7a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	f000 f817 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff ffe0 	bl	8000d50 <HAL_InitTick>
  HAL_MspInit();
 8000d90:	f7ff fe8e 	bl	8000ab0 <HAL_MspInit>
}
 8000d94:	2000      	movs	r0, #0
 8000d96:	bd08      	pop	{r3, pc}
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d9c:	4a02      	ldr	r2, [pc, #8]	; (8000da8 <HAL_IncTick+0xc>)
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200001f8 	.word	0x200001f8

08000dac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <HAL_GetTick+0x8>)
 8000dae:	6818      	ldr	r0, [r3, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200001f8 	.word	0x200001f8

08000db8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dc6:	041b      	lsls	r3, r3, #16
 8000dc8:	0c1b      	lsrs	r3, r3, #16
 8000dca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dd2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dd4:	60d3      	str	r3, [r2, #12]
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b530      	push	{r4, r5, lr}
 8000de0:	68dc      	ldr	r4, [r3, #12]
 8000de2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	bf28      	it	cs
 8000df0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df8:	bf98      	it	ls
 8000dfa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	fa05 f303 	lsl.w	r3, r5, r3
 8000e00:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e04:	bf88      	it	hi
 8000e06:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4019      	ands	r1, r3
 8000e0a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	fa05 f404 	lsl.w	r4, r5, r4
 8000e10:	3c01      	subs	r4, #1
 8000e12:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e16:	ea42 0201 	orr.w	r2, r2, r1
 8000e1a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	bfaf      	iteee	ge
 8000e20:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	4b06      	ldrlt	r3, [pc, #24]	; (8000e40 <HAL_NVIC_SetPriority+0x64>)
 8000e26:	f000 000f 	andlt.w	r0, r0, #15
 8000e2a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	bfa5      	ittet	ge
 8000e2e:	b2d2      	uxtbge	r2, r2
 8000e30:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e3a:	bd30      	pop	{r4, r5, pc}
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	e000ed14 	.word	0xe000ed14

08000e44 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e44:	2301      	movs	r3, #1
 8000e46:	0942      	lsrs	r2, r0, #5
 8000e48:	f000 001f 	and.w	r0, r0, #31
 8000e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e50:	4b01      	ldr	r3, [pc, #4]	; (8000e58 <HAL_NVIC_EnableIRQ+0x14>)
 8000e52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e62:	d20a      	bcs.n	8000e7a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e8a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	bf0c      	ite	eq
 8000e90:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e94:	f022 0204 	bicne.w	r2, r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_SYSTICK_IRQHandler>:
{
 8000ea2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ea4:	f7ff fffc 	bl	8000ea0 <HAL_SYSTICK_Callback>
 8000ea8:	bd08      	pop	{r3, pc}
	...

08000eac <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eac:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000eb0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d003      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eba:	2001      	movs	r0, #1
 8000ebc:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ebe:	6803      	ldr	r3, [r0, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f022 020e 	bic.w	r2, r2, #14
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_DMA_Abort_IT+0x88>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01f      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x6a>
 8000ed6:	3214      	adds	r2, #20
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d01e      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x6e>
 8000edc:	3214      	adds	r2, #20
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01d      	beq.n	8000f1e <HAL_DMA_Abort_IT+0x72>
 8000ee2:	3214      	adds	r2, #20
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d01d      	beq.n	8000f24 <HAL_DMA_Abort_IT+0x78>
 8000ee8:	3214      	adds	r2, #20
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01d      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x7e>
 8000eee:	3214      	adds	r2, #20
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	bf0c      	ite	eq
 8000ef4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000ef8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f00:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f08:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000f0a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000f0e:	b17b      	cbz	r3, 8000f30 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000f10:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f12:	4620      	mov	r0, r4
 8000f14:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f16:	2301      	movs	r3, #1
 8000f18:	e7f0      	b.n	8000efc <HAL_DMA_Abort_IT+0x50>
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	e7ee      	b.n	8000efc <HAL_DMA_Abort_IT+0x50>
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	e7eb      	b.n	8000efc <HAL_DMA_Abort_IT+0x50>
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	e7e8      	b.n	8000efc <HAL_DMA_Abort_IT+0x50>
 8000f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2e:	e7e5      	b.n	8000efc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000f32:	bd10      	pop	{r4, pc}
 8000f34:	40020008 	.word	0x40020008
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000f40:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	4616      	mov	r6, r2
 8000f44:	4b65      	ldr	r3, [pc, #404]	; (80010dc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f46:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80010ec <HAL_GPIO_Init+0x1b0>
 8000f4a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80010f0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000f4e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000f54:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f58:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000f5c:	45a0      	cmp	r8, r4
 8000f5e:	d17f      	bne.n	8001060 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f60:	684d      	ldr	r5, [r1, #4]
 8000f62:	2d12      	cmp	r5, #18
 8000f64:	f000 80af 	beq.w	80010c6 <HAL_GPIO_Init+0x18a>
 8000f68:	f200 8088 	bhi.w	800107c <HAL_GPIO_Init+0x140>
 8000f6c:	2d02      	cmp	r5, #2
 8000f6e:	f000 80a7 	beq.w	80010c0 <HAL_GPIO_Init+0x184>
 8000f72:	d87c      	bhi.n	800106e <HAL_GPIO_Init+0x132>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	f000 808e 	beq.w	8001096 <HAL_GPIO_Init+0x15a>
 8000f7a:	2d01      	cmp	r5, #1
 8000f7c:	f000 809e 	beq.w	80010bc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000f80:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f84:	2cff      	cmp	r4, #255	; 0xff
 8000f86:	bf93      	iteet	ls
 8000f88:	4682      	movls	sl, r0
 8000f8a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f8e:	3d08      	subhi	r5, #8
 8000f90:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f94:	bf92      	itee	ls
 8000f96:	00b5      	lslls	r5, r6, #2
 8000f98:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f9c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000f9e:	fa09 f805 	lsl.w	r8, r9, r5
 8000fa2:	ea2b 0808 	bic.w	r8, fp, r8
 8000fa6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000faa:	bf88      	it	hi
 8000fac:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000fb0:	ea48 0505 	orr.w	r5, r8, r5
 8000fb4:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fb8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fbc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fc0:	d04e      	beq.n	8001060 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4d47      	ldr	r5, [pc, #284]	; (80010e0 <HAL_GPIO_Init+0x1a4>)
 8000fc4:	4f46      	ldr	r7, [pc, #280]	; (80010e0 <HAL_GPIO_Init+0x1a4>)
 8000fc6:	69ad      	ldr	r5, [r5, #24]
 8000fc8:	f026 0803 	bic.w	r8, r6, #3
 8000fcc:	f045 0501 	orr.w	r5, r5, #1
 8000fd0:	61bd      	str	r5, [r7, #24]
 8000fd2:	69bd      	ldr	r5, [r7, #24]
 8000fd4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fd8:	f005 0501 	and.w	r5, r5, #1
 8000fdc:	9501      	str	r5, [sp, #4]
 8000fde:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000fec:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ff0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ff4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff8:	4d3a      	ldr	r5, [pc, #232]	; (80010e4 <HAL_GPIO_Init+0x1a8>)
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d068      	beq.n	80010d0 <HAL_GPIO_Init+0x194>
 8000ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001002:	42a8      	cmp	r0, r5
 8001004:	d066      	beq.n	80010d4 <HAL_GPIO_Init+0x198>
 8001006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100a:	42a8      	cmp	r0, r5
 800100c:	d064      	beq.n	80010d8 <HAL_GPIO_Init+0x19c>
 800100e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001012:	42a8      	cmp	r0, r5
 8001014:	bf0c      	ite	eq
 8001016:	2503      	moveq	r5, #3
 8001018:	2504      	movne	r5, #4
 800101a:	fa05 f50b 	lsl.w	r5, r5, fp
 800101e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001022:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001026:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001028:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 800102c:	bf14      	ite	ne
 800102e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001030:	43a5      	biceq	r5, r4
 8001032:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001034:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 800103a:	bf14      	ite	ne
 800103c:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800103e:	43a5      	biceq	r5, r4
 8001040:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001042:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001048:	bf14      	ite	ne
 800104a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800104c:	43a5      	biceq	r5, r4
 800104e:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001050:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001052:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001056:	bf14      	ite	ne
 8001058:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800105a:	ea25 0404 	biceq.w	r4, r5, r4
 800105e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001060:	3601      	adds	r6, #1
 8001062:	2e10      	cmp	r6, #16
 8001064:	f47f af73 	bne.w	8000f4e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001068:	b003      	add	sp, #12
 800106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800106e:	2d03      	cmp	r5, #3
 8001070:	d022      	beq.n	80010b8 <HAL_GPIO_Init+0x17c>
 8001072:	2d11      	cmp	r5, #17
 8001074:	d184      	bne.n	8000f80 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001076:	68ca      	ldr	r2, [r1, #12]
 8001078:	3204      	adds	r2, #4
          break;
 800107a:	e781      	b.n	8000f80 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800107c:	4f1a      	ldr	r7, [pc, #104]	; (80010e8 <HAL_GPIO_Init+0x1ac>)
 800107e:	42bd      	cmp	r5, r7
 8001080:	d009      	beq.n	8001096 <HAL_GPIO_Init+0x15a>
 8001082:	d812      	bhi.n	80010aa <HAL_GPIO_Init+0x16e>
 8001084:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80010f4 <HAL_GPIO_Init+0x1b8>
 8001088:	454d      	cmp	r5, r9
 800108a:	d004      	beq.n	8001096 <HAL_GPIO_Init+0x15a>
 800108c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001090:	454d      	cmp	r5, r9
 8001092:	f47f af75 	bne.w	8000f80 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001096:	688a      	ldr	r2, [r1, #8]
 8001098:	b1c2      	cbz	r2, 80010cc <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800109a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800109c:	bf0c      	ite	eq
 800109e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80010a2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a6:	2208      	movs	r2, #8
 80010a8:	e76a      	b.n	8000f80 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80010aa:	4575      	cmp	r5, lr
 80010ac:	d0f3      	beq.n	8001096 <HAL_GPIO_Init+0x15a>
 80010ae:	4565      	cmp	r5, ip
 80010b0:	d0f1      	beq.n	8001096 <HAL_GPIO_Init+0x15a>
 80010b2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010f8 <HAL_GPIO_Init+0x1bc>
 80010b6:	e7eb      	b.n	8001090 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2200      	movs	r2, #0
 80010ba:	e761      	b.n	8000f80 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010bc:	68ca      	ldr	r2, [r1, #12]
          break;
 80010be:	e75f      	b.n	8000f80 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c0:	68ca      	ldr	r2, [r1, #12]
 80010c2:	3208      	adds	r2, #8
          break;
 80010c4:	e75c      	b.n	8000f80 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c6:	68ca      	ldr	r2, [r1, #12]
 80010c8:	320c      	adds	r2, #12
          break;
 80010ca:	e759      	b.n	8000f80 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010cc:	2204      	movs	r2, #4
 80010ce:	e757      	b.n	8000f80 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d0:	2500      	movs	r5, #0
 80010d2:	e7a2      	b.n	800101a <HAL_GPIO_Init+0xde>
 80010d4:	2501      	movs	r5, #1
 80010d6:	e7a0      	b.n	800101a <HAL_GPIO_Init+0xde>
 80010d8:	2502      	movs	r5, #2
 80010da:	e79e      	b.n	800101a <HAL_GPIO_Init+0xde>
 80010dc:	40010400 	.word	0x40010400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	10210000 	.word	0x10210000
 80010ec:	10310000 	.word	0x10310000
 80010f0:	10320000 	.word	0x10320000
 80010f4:	10110000 	.word	0x10110000
 80010f8:	10220000 	.word	0x10220000

080010fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010fc:	b10a      	cbz	r2, 8001102 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	6101      	str	r1, [r0, #16]
 8001100:	4770      	bx	lr
 8001102:	0409      	lsls	r1, r1, #16
 8001104:	e7fb      	b.n	80010fe <HAL_GPIO_WritePin+0x2>
	...

08001108 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001108:	6803      	ldr	r3, [r0, #0]
{
 800110a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	07db      	lsls	r3, r3, #31
{
 8001110:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	d410      	bmi.n	8001136 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	079f      	lsls	r7, r3, #30
 8001118:	d45e      	bmi.n	80011d8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	0719      	lsls	r1, r3, #28
 800111e:	f100 8095 	bmi.w	800124c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	075a      	lsls	r2, r3, #29
 8001126:	f100 80bf 	bmi.w	80012a8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112a:	69ea      	ldr	r2, [r5, #28]
 800112c:	2a00      	cmp	r2, #0
 800112e:	f040 812d 	bne.w	800138c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001132:	2000      	movs	r0, #0
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001136:	4c90      	ldr	r4, [pc, #576]	; (8001378 <HAL_RCC_OscConfig+0x270>)
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d007      	beq.n	8001152 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001142:	6863      	ldr	r3, [r4, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x5e>
 800114c:	6863      	ldr	r3, [r4, #4]
 800114e:	03de      	lsls	r6, r3, #15
 8001150:	d509      	bpl.n	8001166 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	039c      	lsls	r4, r3, #14
 8001156:	d5dd      	bpl.n	8001114 <HAL_RCC_OscConfig+0xc>
 8001158:	686b      	ldr	r3, [r5, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1da      	bne.n	8001114 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800115e:	2001      	movs	r0, #1
}
 8001160:	b002      	add	sp, #8
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001166:	686b      	ldr	r3, [r5, #4]
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d110      	bne.n	8001190 <HAL_RCC_OscConfig+0x88>
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001176:	f7ff fe19 	bl	8000dac <HAL_GetTick>
 800117a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	0398      	lsls	r0, r3, #14
 8001180:	d4c8      	bmi.n	8001114 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fe13 	bl	8000dac <HAL_GetTick>
 8001186:	1b80      	subs	r0, r0, r6
 8001188:	2864      	cmp	r0, #100	; 0x64
 800118a:	d9f7      	bls.n	800117c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e7e7      	b.n	8001160 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001190:	b99b      	cbnz	r3, 80011ba <HAL_RCC_OscConfig+0xb2>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011a2:	f7ff fe03 	bl	8000dac <HAL_GetTick>
 80011a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	0399      	lsls	r1, r3, #14
 80011ac:	d5b2      	bpl.n	8001114 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff fdfd 	bl	8000dac <HAL_GetTick>
 80011b2:	1b80      	subs	r0, r0, r6
 80011b4:	2864      	cmp	r0, #100	; 0x64
 80011b6:	d9f7      	bls.n	80011a8 <HAL_RCC_OscConfig+0xa0>
 80011b8:	e7e8      	b.n	800118c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	d103      	bne.n	80011ca <HAL_RCC_OscConfig+0xc2>
 80011c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c6:	6023      	str	r3, [r4, #0]
 80011c8:	e7d1      	b.n	800116e <HAL_RCC_OscConfig+0x66>
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ce:	6023      	str	r3, [r4, #0]
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	e7cd      	b.n	8001174 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011d8:	4c67      	ldr	r4, [pc, #412]	; (8001378 <HAL_RCC_OscConfig+0x270>)
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	f013 0f0c 	tst.w	r3, #12
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d110      	bne.n	800120e <HAL_RCC_OscConfig+0x106>
 80011ec:	6863      	ldr	r3, [r4, #4]
 80011ee:	03da      	lsls	r2, r3, #15
 80011f0:	d40d      	bmi.n	800120e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	079b      	lsls	r3, r3, #30
 80011f6:	d502      	bpl.n	80011fe <HAL_RCC_OscConfig+0xf6>
 80011f8:	692b      	ldr	r3, [r5, #16]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d1af      	bne.n	800115e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	696a      	ldr	r2, [r5, #20]
 8001202:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001206:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800120a:	6023      	str	r3, [r4, #0]
 800120c:	e785      	b.n	800111a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120e:	692a      	ldr	r2, [r5, #16]
 8001210:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_RCC_OscConfig+0x274>)
 8001212:	b16a      	cbz	r2, 8001230 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001218:	f7ff fdc8 	bl	8000dac <HAL_GetTick>
 800121c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	079f      	lsls	r7, r3, #30
 8001222:	d4ec      	bmi.n	80011fe <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fdc2 	bl	8000dac <HAL_GetTick>
 8001228:	1b80      	subs	r0, r0, r6
 800122a:	2802      	cmp	r0, #2
 800122c:	d9f7      	bls.n	800121e <HAL_RCC_OscConfig+0x116>
 800122e:	e7ad      	b.n	800118c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001230:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001232:	f7ff fdbb 	bl	8000dac <HAL_GetTick>
 8001236:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	0798      	lsls	r0, r3, #30
 800123c:	f57f af6d 	bpl.w	800111a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fdb4 	bl	8000dac <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2802      	cmp	r0, #2
 8001248:	d9f6      	bls.n	8001238 <HAL_RCC_OscConfig+0x130>
 800124a:	e79f      	b.n	800118c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124c:	69aa      	ldr	r2, [r5, #24]
 800124e:	4c4a      	ldr	r4, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x270>)
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_RCC_OscConfig+0x278>)
 8001252:	b1da      	cbz	r2, 800128c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001258:	f7ff fda8 	bl	8000dac <HAL_GetTick>
 800125c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001260:	079b      	lsls	r3, r3, #30
 8001262:	d50d      	bpl.n	8001280 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001264:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_OscConfig+0x27c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001270:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001272:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001274:	9b01      	ldr	r3, [sp, #4]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_RCC_OscConfig+0x16a>
 800127e:	e750      	b.n	8001122 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fd94 	bl	8000dac <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	2802      	cmp	r0, #2
 8001288:	d9e9      	bls.n	800125e <HAL_RCC_OscConfig+0x156>
 800128a:	e77f      	b.n	800118c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800128c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800128e:	f7ff fd8d 	bl	8000dac <HAL_GetTick>
 8001292:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001296:	079f      	lsls	r7, r3, #30
 8001298:	f57f af43 	bpl.w	8001122 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fd86 	bl	8000dac <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9f6      	bls.n	8001294 <HAL_RCC_OscConfig+0x18c>
 80012a6:	e771      	b.n	800118c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a8:	4c33      	ldr	r4, [pc, #204]	; (8001378 <HAL_RCC_OscConfig+0x270>)
 80012aa:	69e3      	ldr	r3, [r4, #28]
 80012ac:	00d8      	lsls	r0, r3, #3
 80012ae:	d424      	bmi.n	80012fa <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80012b0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	69e3      	ldr	r3, [r4, #28]
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	61e3      	str	r3, [r4, #28]
 80012ba:	69e3      	ldr	r3, [r4, #28]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c4:	4e30      	ldr	r6, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012c6:	6833      	ldr	r3, [r6, #0]
 80012c8:	05d9      	lsls	r1, r3, #23
 80012ca:	d518      	bpl.n	80012fe <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012cc:	68eb      	ldr	r3, [r5, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d126      	bne.n	8001320 <HAL_RCC_OscConfig+0x218>
 80012d2:	6a23      	ldr	r3, [r4, #32]
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012da:	f7ff fd67 	bl	8000dac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012e2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	6a23      	ldr	r3, [r4, #32]
 80012e6:	079b      	lsls	r3, r3, #30
 80012e8:	d53f      	bpl.n	800136a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80012ea:	2f00      	cmp	r7, #0
 80012ec:	f43f af1d 	beq.w	800112a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f0:	69e3      	ldr	r3, [r4, #28]
 80012f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f6:	61e3      	str	r3, [r4, #28]
 80012f8:	e717      	b.n	800112a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	2700      	movs	r7, #0
 80012fc:	e7e2      	b.n	80012c4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fe:	6833      	ldr	r3, [r6, #0]
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001306:	f7ff fd51 	bl	8000dac <HAL_GetTick>
 800130a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	6833      	ldr	r3, [r6, #0]
 800130e:	05da      	lsls	r2, r3, #23
 8001310:	d4dc      	bmi.n	80012cc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001312:	f7ff fd4b 	bl	8000dac <HAL_GetTick>
 8001316:	eba0 0008 	sub.w	r0, r0, r8
 800131a:	2864      	cmp	r0, #100	; 0x64
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x204>
 800131e:	e735      	b.n	800118c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001320:	b9ab      	cbnz	r3, 800134e <HAL_RCC_OscConfig+0x246>
 8001322:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6223      	str	r3, [r4, #32]
 800132e:	6a23      	ldr	r3, [r4, #32]
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001336:	f7ff fd39 	bl	8000dac <HAL_GetTick>
 800133a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	6a23      	ldr	r3, [r4, #32]
 800133e:	0798      	lsls	r0, r3, #30
 8001340:	d5d3      	bpl.n	80012ea <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fd33 	bl	8000dac <HAL_GetTick>
 8001346:	1b80      	subs	r0, r0, r6
 8001348:	4540      	cmp	r0, r8
 800134a:	d9f7      	bls.n	800133c <HAL_RCC_OscConfig+0x234>
 800134c:	e71e      	b.n	800118c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134e:	2b05      	cmp	r3, #5
 8001350:	6a23      	ldr	r3, [r4, #32]
 8001352:	d103      	bne.n	800135c <HAL_RCC_OscConfig+0x254>
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6223      	str	r3, [r4, #32]
 800135a:	e7ba      	b.n	80012d2 <HAL_RCC_OscConfig+0x1ca>
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6223      	str	r3, [r4, #32]
 8001362:	6a23      	ldr	r3, [r4, #32]
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	e7b6      	b.n	80012d8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fd1f 	bl	8000dac <HAL_GetTick>
 800136e:	eba0 0008 	sub.w	r0, r0, r8
 8001372:	42b0      	cmp	r0, r6
 8001374:	d9b6      	bls.n	80012e4 <HAL_RCC_OscConfig+0x1dc>
 8001376:	e709      	b.n	800118c <HAL_RCC_OscConfig+0x84>
 8001378:	40021000 	.word	0x40021000
 800137c:	42420000 	.word	0x42420000
 8001380:	42420480 	.word	0x42420480
 8001384:	20000000 	.word	0x20000000
 8001388:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138c:	4c22      	ldr	r4, [pc, #136]	; (8001418 <HAL_RCC_OscConfig+0x310>)
 800138e:	6863      	ldr	r3, [r4, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	f43f aee2 	beq.w	800115e <HAL_RCC_OscConfig+0x56>
 800139a:	2300      	movs	r3, #0
 800139c:	4e1f      	ldr	r6, [pc, #124]	; (800141c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013a0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a2:	d12b      	bne.n	80013fc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80013a4:	f7ff fd02 	bl	8000dac <HAL_GetTick>
 80013a8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	0199      	lsls	r1, r3, #6
 80013ae:	d41f      	bmi.n	80013f0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b0:	6a2b      	ldr	r3, [r5, #32]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013b8:	6862      	ldr	r2, [r4, #4]
 80013ba:	68a9      	ldr	r1, [r5, #8]
 80013bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013c0:	430a      	orrs	r2, r1
 80013c2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013c6:	6862      	ldr	r2, [r4, #4]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013d2:	2301      	movs	r3, #1
 80013d4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013d6:	f7ff fce9 	bl	8000dac <HAL_GetTick>
 80013da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	019a      	lsls	r2, r3, #6
 80013e0:	f53f aea7 	bmi.w	8001132 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fce2 	bl	8000dac <HAL_GetTick>
 80013e8:	1b40      	subs	r0, r0, r5
 80013ea:	2802      	cmp	r0, #2
 80013ec:	d9f6      	bls.n	80013dc <HAL_RCC_OscConfig+0x2d4>
 80013ee:	e6cd      	b.n	800118c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fcdc 	bl	8000dac <HAL_GetTick>
 80013f4:	1bc0      	subs	r0, r0, r7
 80013f6:	2802      	cmp	r0, #2
 80013f8:	d9d7      	bls.n	80013aa <HAL_RCC_OscConfig+0x2a2>
 80013fa:	e6c7      	b.n	800118c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcd6 	bl	8000dac <HAL_GetTick>
 8001400:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	f57f ae94 	bpl.w	8001132 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fccf 	bl	8000dac <HAL_GetTick>
 800140e:	1b40      	subs	r0, r0, r5
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f6      	bls.n	8001402 <HAL_RCC_OscConfig+0x2fa>
 8001414:	e6ba      	b.n	800118c <HAL_RCC_OscConfig+0x84>
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	42420060 	.word	0x42420060

08001420 <HAL_RCC_GetSysClockFreq>:
{
 8001420:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8001424:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001426:	ac02      	add	r4, sp, #8
 8001428:	f103 0510 	add.w	r5, r3, #16
 800142c:	4622      	mov	r2, r4
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	3308      	adds	r3, #8
 8001434:	c203      	stmia	r2!, {r0, r1}
 8001436:	42ab      	cmp	r3, r5
 8001438:	4614      	mov	r4, r2
 800143a:	d1f7      	bne.n	800142c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800143c:	2301      	movs	r3, #1
 800143e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001442:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001444:	4912      	ldr	r1, [pc, #72]	; (8001490 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001446:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800144a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800144c:	f003 020c 	and.w	r2, r3, #12
 8001450:	2a08      	cmp	r2, #8
 8001452:	d118      	bne.n	8001486 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001454:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001458:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800145a:	bf48      	it	mi
 800145c:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800145e:	a806      	add	r0, sp, #24
 8001460:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001462:	bf48      	it	mi
 8001464:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001468:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800146c:	bf41      	itttt	mi
 800146e:	aa06      	addmi	r2, sp, #24
 8001470:	189b      	addmi	r3, r3, r2
 8001472:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001476:	4b07      	ldrmi	r3, [pc, #28]	; (8001494 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001478:	bf54      	ite	pl
 800147a:	4b07      	ldrpl	r3, [pc, #28]	; (8001498 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800147c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001480:	4358      	muls	r0, r3
}
 8001482:	b007      	add	sp, #28
 8001484:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001488:	e7fb      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x62>
 800148a:	bf00      	nop
 800148c:	08002f24 	.word	0x08002f24
 8001490:	40021000 	.word	0x40021000
 8001494:	007a1200 	.word	0x007a1200
 8001498:	003d0900 	.word	0x003d0900

0800149c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_RCC_ClockConfig+0x138>)
{
 800149e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a2:	6813      	ldr	r3, [r2, #0]
{
 80014a4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	428b      	cmp	r3, r1
{
 80014ac:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014ae:	d328      	bcc.n	8001502 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	682a      	ldr	r2, [r5, #0]
 80014b2:	0791      	lsls	r1, r2, #30
 80014b4:	d432      	bmi.n	800151c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	07d2      	lsls	r2, r2, #31
 80014b8:	d438      	bmi.n	800152c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014ba:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <HAL_RCC_ClockConfig+0x138>)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	429e      	cmp	r6, r3
 80014c4:	d373      	bcc.n	80015ae <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c6:	682a      	ldr	r2, [r5, #0]
 80014c8:	4c43      	ldr	r4, [pc, #268]	; (80015d8 <HAL_RCC_ClockConfig+0x13c>)
 80014ca:	f012 0f04 	tst.w	r2, #4
 80014ce:	d179      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	0713      	lsls	r3, r2, #28
 80014d2:	d506      	bpl.n	80014e2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014d4:	6863      	ldr	r3, [r4, #4]
 80014d6:	692a      	ldr	r2, [r5, #16]
 80014d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014e0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e2:	f7ff ff9d 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	4a3c      	ldr	r2, [pc, #240]	; (80015dc <HAL_RCC_ClockConfig+0x140>)
 80014ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	40d8      	lsrs	r0, r3
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_RCC_ClockConfig+0x144>)
 80014f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fc2a 	bl	8000d50 <HAL_InitTick>
  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
}
 80014fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f023 0307 	bic.w	r3, r3, #7
 8001508:	430b      	orrs	r3, r1
 800150a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800150c:	6813      	ldr	r3, [r2, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	4299      	cmp	r1, r3
 8001514:	d0cc      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	492e      	ldr	r1, [pc, #184]	; (80015d8 <HAL_RCC_ClockConfig+0x13c>)
 800151e:	68a8      	ldr	r0, [r5, #8]
 8001520:	684b      	ldr	r3, [r1, #4]
 8001522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001526:	4303      	orrs	r3, r0
 8001528:	604b      	str	r3, [r1, #4]
 800152a:	e7c4      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152c:	686a      	ldr	r2, [r5, #4]
 800152e:	4c2a      	ldr	r4, [pc, #168]	; (80015d8 <HAL_RCC_ClockConfig+0x13c>)
 8001530:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	d0ec      	beq.n	8001516 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	f023 0303 	bic.w	r3, r3, #3
 8001546:	4313      	orrs	r3, r2
 8001548:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800154a:	f7ff fc2f 	bl	8000dac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001550:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	2b01      	cmp	r3, #1
 8001554:	d114      	bne.n	8001580 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001556:	6863      	ldr	r3, [r4, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b04      	cmp	r3, #4
 800155e:	d0ac      	beq.n	80014ba <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff fc24 	bl	8000dac <HAL_GetTick>
 8001564:	1bc0      	subs	r0, r0, r7
 8001566:	4540      	cmp	r0, r8
 8001568:	d9f5      	bls.n	8001556 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
 800156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001570:	2a02      	cmp	r2, #2
 8001572:	d102      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001574:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001578:	e7df      	b.n	800153a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	f013 0f02 	tst.w	r3, #2
 800157e:	e7dc      	b.n	800153a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001580:	2b02      	cmp	r3, #2
 8001582:	d10f      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001584:	6863      	ldr	r3, [r4, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d095      	beq.n	80014ba <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158e:	f7ff fc0d 	bl	8000dac <HAL_GetTick>
 8001592:	1bc0      	subs	r0, r0, r7
 8001594:	4540      	cmp	r0, r8
 8001596:	d9f5      	bls.n	8001584 <HAL_RCC_ClockConfig+0xe8>
 8001598:	e7e7      	b.n	800156a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159a:	f7ff fc07 	bl	8000dac <HAL_GetTick>
 800159e:	1bc0      	subs	r0, r0, r7
 80015a0:	4540      	cmp	r0, r8
 80015a2:	d8e2      	bhi.n	800156a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	f013 0f0c 	tst.w	r3, #12
 80015aa:	d1f6      	bne.n	800159a <HAL_RCC_ClockConfig+0xfe>
 80015ac:	e785      	b.n	80014ba <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	f023 0307 	bic.w	r3, r3, #7
 80015b4:	4333      	orrs	r3, r6
 80015b6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b8:	6813      	ldr	r3, [r2, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	429e      	cmp	r6, r3
 80015c0:	d1a9      	bne.n	8001516 <HAL_RCC_ClockConfig+0x7a>
 80015c2:	e780      	b.n	80014c6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	6863      	ldr	r3, [r4, #4]
 80015c6:	68e9      	ldr	r1, [r5, #12]
 80015c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6063      	str	r3, [r4, #4]
 80015d0:	e77e      	b.n	80014d0 <HAL_RCC_ClockConfig+0x34>
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002f51 	.word	0x08002f51
 80015e0:	20000000 	.word	0x20000000

080015e4 <HAL_RCC_GetHCLKFreq>:
}
 80015e4:	4b01      	ldr	r3, [pc, #4]	; (80015ec <HAL_RCC_GetHCLKFreq+0x8>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000

080015f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015fe:	6810      	ldr	r0, [r2, #0]
}    
 8001600:	40d8      	lsrs	r0, r3
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000
 8001608:	08002f61 	.word	0x08002f61
 800160c:	20000000 	.word	0x20000000

08001610 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800161e:	6810      	ldr	r0, [r2, #0]
} 
 8001620:	40d8      	lsrs	r0, r3
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000
 8001628:	08002f61 	.word	0x08002f61
 800162c:	20000000 	.word	0x20000000

08001630 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001630:	6a03      	ldr	r3, [r0, #32]
{
 8001632:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800163a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800163c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800163e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001640:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001642:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001646:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001648:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800164a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800164e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001650:	4d0a      	ldr	r5, [pc, #40]	; (800167c <TIM_OC1_SetConfig+0x4c>)
 8001652:	42a8      	cmp	r0, r5
 8001654:	d10b      	bne.n	800166e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001656:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001658:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800165c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800165e:	698e      	ldr	r6, [r1, #24]
 8001660:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001662:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001666:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001668:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800166c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800166e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001670:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001672:	684a      	ldr	r2, [r1, #4]
 8001674:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001676:	6203      	str	r3, [r0, #32]
 8001678:	bd70      	pop	{r4, r5, r6, pc}
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00

08001680 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001680:	6a03      	ldr	r3, [r0, #32]
{
 8001682:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001688:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800168a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800168c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800168e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001690:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001692:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001696:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001698:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800169a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800169e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80016a2:	4d0b      	ldr	r5, [pc, #44]	; (80016d0 <TIM_OC3_SetConfig+0x50>)
 80016a4:	42a8      	cmp	r0, r5
 80016a6:	d10d      	bne.n	80016c4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016a8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80016aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016b2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80016b4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80016b6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016ba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80016bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016c0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80016c8:	684a      	ldr	r2, [r1, #4]
 80016ca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016cc:	6203      	str	r3, [r0, #32]
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	40012c00 	.word	0x40012c00

080016d4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016d4:	6a03      	ldr	r3, [r0, #32]
{
 80016d6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016e2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80016f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016f8:	4d06      	ldr	r5, [pc, #24]	; (8001714 <TIM_OC4_SetConfig+0x40>)
 80016fa:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80016fc:	bf02      	ittt	eq
 80016fe:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001700:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001704:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001708:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800170a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800170c:	684a      	ldr	r2, [r1, #4]
 800170e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001710:	6203      	str	r3, [r0, #32]
 8001712:	bd30      	pop	{r4, r5, pc}
 8001714:	40012c00 	.word	0x40012c00

08001718 <HAL_TIM_PWM_MspInit>:
 8001718:	4770      	bx	lr

0800171a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800171a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800171e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001720:	2b01      	cmp	r3, #1
 8001722:	f04f 0302 	mov.w	r3, #2
 8001726:	d01c      	beq.n	8001762 <HAL_TIM_ConfigClockSource+0x48>
 8001728:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800172a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800172e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001734:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001736:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800173a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800173e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001740:	680a      	ldr	r2, [r1, #0]
 8001742:	2a40      	cmp	r2, #64	; 0x40
 8001744:	d079      	beq.n	800183a <HAL_TIM_ConfigClockSource+0x120>
 8001746:	d819      	bhi.n	800177c <HAL_TIM_ConfigClockSource+0x62>
 8001748:	2a10      	cmp	r2, #16
 800174a:	f000 8093 	beq.w	8001874 <HAL_TIM_ConfigClockSource+0x15a>
 800174e:	d80a      	bhi.n	8001766 <HAL_TIM_ConfigClockSource+0x4c>
 8001750:	2a00      	cmp	r2, #0
 8001752:	f000 8089 	beq.w	8001868 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001756:	2301      	movs	r3, #1
 8001758:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800175c:	2300      	movs	r3, #0
 800175e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001762:	4618      	mov	r0, r3
}
 8001764:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001766:	2a20      	cmp	r2, #32
 8001768:	f000 808a 	beq.w	8001880 <HAL_TIM_ConfigClockSource+0x166>
 800176c:	2a30      	cmp	r2, #48	; 0x30
 800176e:	d1f2      	bne.n	8001756 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001770:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001772:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001776:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800177a:	e036      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800177c:	2a70      	cmp	r2, #112	; 0x70
 800177e:	d036      	beq.n	80017ee <HAL_TIM_ConfigClockSource+0xd4>
 8001780:	d81b      	bhi.n	80017ba <HAL_TIM_ConfigClockSource+0xa0>
 8001782:	2a50      	cmp	r2, #80	; 0x50
 8001784:	d042      	beq.n	800180c <HAL_TIM_ConfigClockSource+0xf2>
 8001786:	2a60      	cmp	r2, #96	; 0x60
 8001788:	d1e5      	bne.n	8001756 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800178a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800178c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800178e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001792:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001794:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001796:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001798:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800179a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800179e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80017a2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017a6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80017aa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80017ac:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80017ae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80017b4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80017b8:	e017      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80017ba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017be:	d011      	beq.n	80017e4 <HAL_TIM_ConfigClockSource+0xca>
 80017c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80017c4:	d1c7      	bne.n	8001756 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017c6:	688a      	ldr	r2, [r1, #8]
 80017c8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80017ca:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017cc:	68c9      	ldr	r1, [r1, #12]
 80017ce:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017d0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017d8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017da:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017e2:	e002      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e7b3      	b.n	8001756 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017ee:	688a      	ldr	r2, [r1, #8]
 80017f0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80017f2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017f4:	68c9      	ldr	r1, [r1, #12]
 80017f6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001800:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001802:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001804:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001806:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800180a:	e7ee      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800180c:	684c      	ldr	r4, [r1, #4]
 800180e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001810:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001812:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001814:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001818:	f025 0501 	bic.w	r5, r5, #1
 800181c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800181e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001820:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001822:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001826:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800182a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800182c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800182e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001830:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001834:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001838:	e7d7      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800183a:	684c      	ldr	r4, [r1, #4]
 800183c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800183e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001840:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001842:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001846:	f025 0501 	bic.w	r5, r5, #1
 800184a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800184c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800184e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001850:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001854:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800185a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800185c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800185e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001862:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001866:	e7c0      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001868:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800186a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800186e:	f042 0207 	orr.w	r2, r2, #7
 8001872:	e7ba      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001874:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001876:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800187a:	f042 0217 	orr.w	r2, r2, #23
 800187e:	e7b4      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001880:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001882:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001886:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800188a:	e7ae      	b.n	80017ea <HAL_TIM_ConfigClockSource+0xd0>

0800188c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800188e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001890:	4290      	cmp	r0, r2
 8001892:	d00a      	beq.n	80018aa <TIM_Base_SetConfig+0x1e>
 8001894:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001898:	d007      	beq.n	80018aa <TIM_Base_SetConfig+0x1e>
 800189a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800189e:	4290      	cmp	r0, r2
 80018a0:	d003      	beq.n	80018aa <TIM_Base_SetConfig+0x1e>
 80018a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a6:	4290      	cmp	r0, r2
 80018a8:	d115      	bne.n	80018d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80018aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80018b0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <TIM_Base_SetConfig+0x6c>)
 80018b4:	4290      	cmp	r0, r2
 80018b6:	d00a      	beq.n	80018ce <TIM_Base_SetConfig+0x42>
 80018b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018bc:	d007      	beq.n	80018ce <TIM_Base_SetConfig+0x42>
 80018be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018c2:	4290      	cmp	r0, r2
 80018c4:	d003      	beq.n	80018ce <TIM_Base_SetConfig+0x42>
 80018c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ca:	4290      	cmp	r0, r2
 80018cc:	d103      	bne.n	80018d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80018d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018d4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80018d6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80018d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80018dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80018de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e0:	688b      	ldr	r3, [r1, #8]
 80018e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80018e4:	680b      	ldr	r3, [r1, #0]
 80018e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <TIM_Base_SetConfig+0x6c>)
 80018ea:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80018ec:	bf04      	itt	eq
 80018ee:	690b      	ldreq	r3, [r1, #16]
 80018f0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80018f2:	2301      	movs	r3, #1
 80018f4:	6143      	str	r3, [r0, #20]
 80018f6:	4770      	bx	lr
 80018f8:	40012c00 	.word	0x40012c00

080018fc <HAL_TIM_Base_Init>:
{
 80018fc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018fe:	4604      	mov	r4, r0
 8001900:	b1a0      	cbz	r0, 800192c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001902:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800190a:	b91b      	cbnz	r3, 8001914 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800190c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001910:	f7ff f916 	bl	8000b40 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001914:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001916:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001918:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191c:	1d21      	adds	r1, r4, #4
 800191e:	f7ff ffb5 	bl	800188c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001922:	2301      	movs	r3, #1
  return HAL_OK;
 8001924:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800192a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800192c:	2001      	movs	r0, #1
}
 800192e:	bd10      	pop	{r4, pc}

08001930 <HAL_TIM_PWM_Init>:
{
 8001930:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001932:	4604      	mov	r4, r0
 8001934:	b1a0      	cbz	r0, 8001960 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001936:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800193a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800193e:	b91b      	cbnz	r3, 8001948 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001940:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001944:	f7ff fee8 	bl	8001718 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001948:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800194c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	1d21      	adds	r1, r4, #4
 8001952:	f7ff ff9b 	bl	800188c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001956:	2301      	movs	r3, #1
  return HAL_OK;
 8001958:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800195a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800195e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
}
 8001962:	bd10      	pop	{r4, pc}

08001964 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001964:	6a03      	ldr	r3, [r0, #32]
{
 8001966:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001968:	f023 0310 	bic.w	r3, r3, #16
 800196c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800196e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001970:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001972:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001974:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001976:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800197a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800197e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001980:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001984:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001988:	4d0b      	ldr	r5, [pc, #44]	; (80019b8 <TIM_OC2_SetConfig+0x54>)
 800198a:	42a8      	cmp	r0, r5
 800198c:	d10d      	bne.n	80019aa <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800198e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001994:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001998:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800199a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800199c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80019a0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80019a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80019a6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80019aa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80019ac:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80019ae:	684a      	ldr	r2, [r1, #4]
 80019b0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80019b2:	6203      	str	r3, [r0, #32]
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	bf00      	nop
 80019b8:	40012c00 	.word	0x40012c00

080019bc <HAL_TIM_PWM_ConfigChannel>:
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80019be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80019c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	f04f 0002 	mov.w	r0, #2
 80019ca:	d025      	beq.n	8001a18 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80019cc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80019ce:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80019d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80019d6:	2a0c      	cmp	r2, #12
 80019d8:	d818      	bhi.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x50>
 80019da:	e8df f002 	tbb	[pc, r2]
 80019de:	1707      	.short	0x1707
 80019e0:	171e1717 	.word	0x171e1717
 80019e4:	172f1717 	.word	0x172f1717
 80019e8:	1717      	.short	0x1717
 80019ea:	40          	.byte	0x40
 80019eb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019ec:	6820      	ldr	r0, [r4, #0]
 80019ee:	f7ff fe1f 	bl	8001630 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	f042 0208 	orr.w	r2, r2, #8
 80019fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	f022 0204 	bic.w	r2, r2, #4
 8001a04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001a0a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001a0e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a14:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a1a:	6820      	ldr	r0, [r4, #0]
 8001a1c:	f7ff ffa2 	bl	8001964 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a20:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001a22:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a3a:	e7e6      	b.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	f7ff fe1f 	bl	8001680 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a42:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a44:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	f042 0208 	orr.w	r2, r2, #8
 8001a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a4e:	69da      	ldr	r2, [r3, #28]
 8001a50:	f022 0204 	bic.w	r2, r2, #4
 8001a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001a5a:	61da      	str	r2, [r3, #28]
    break;
 8001a5c:	e7d6      	b.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	f7ff fe38 	bl	80016d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a64:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001a66:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a7e:	e7ec      	b.n	8001a5a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a80:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a82:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a84:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001a86:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001a88:	ea23 0304 	bic.w	r3, r3, r4
 8001a8c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a8e:	6a03      	ldr	r3, [r0, #32]
 8001a90:	408a      	lsls	r2, r1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	6202      	str	r2, [r0, #32]
 8001a96:	bd10      	pop	{r4, pc}

08001a98 <HAL_TIM_PWM_Start>:
{
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	6800      	ldr	r0, [r0, #0]
 8001aa0:	f7ff ffee 	bl	8001a80 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_TIM_PWM_Start+0x28>)
}
 8001aa8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aaa:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001aac:	bf02      	ittt	eq
 8001aae:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001ab0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001ab4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bd10      	pop	{r4, pc}
 8001ac0:	40012c00 	.word	0x40012c00

08001ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ac4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d01f      	beq.n	8001b0c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001acc:	68cb      	ldr	r3, [r1, #12]
 8001ace:	688a      	ldr	r2, [r1, #8]
 8001ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001ad6:	684a      	ldr	r2, [r1, #4]
 8001ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001adc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001ade:	680a      	ldr	r2, [r1, #0]
 8001ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ae4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ae6:	690a      	ldr	r2, [r1, #16]
 8001ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001aee:	694a      	ldr	r2, [r1, #20]
 8001af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001af4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001af6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001afc:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001afe:	6802      	ldr	r2, [r0, #0]
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001b02:	2300      	movs	r3, #0
 8001b04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001b08:	4618      	mov	r0, r3
 8001b0a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001b0c:	2002      	movs	r0, #2
}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001b10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001b14:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	f04f 0302 	mov.w	r3, #2
 8001b1c:	d018      	beq.n	8001b50 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001b1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b22:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001b24:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b26:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b28:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b2e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4322      	orrs	r2, r4
 8001b34:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001b50:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001b52:	bd10      	pop	{r4, pc}

08001b54 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b54:	6803      	ldr	r3, [r0, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b66:	2320      	movs	r3, #32
 8001b68:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001b6c:	4770      	bx	lr
	...

08001b70 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b74:	6805      	ldr	r5, [r0, #0]
 8001b76:	68c2      	ldr	r2, [r0, #12]
 8001b78:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b7a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b80:	4313      	orrs	r3, r2
 8001b82:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b84:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001b86:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001b8c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001b90:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b94:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b9a:	696b      	ldr	r3, [r5, #20]
 8001b9c:	6982      	ldr	r2, [r0, #24]
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <UART_SetConfig+0x138>)
{
 8001ba8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001baa:	429d      	cmp	r5, r3
 8001bac:	f04f 0419 	mov.w	r4, #25
 8001bb0:	d146      	bne.n	8001c40 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bb2:	f7ff fd2d 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8001bb6:	fb04 f300 	mul.w	r3, r4, r0
 8001bba:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001bbe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001bc2:	00b6      	lsls	r6, r6, #2
 8001bc4:	fbb3 f3f6 	udiv	r3, r3, r6
 8001bc8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bcc:	011e      	lsls	r6, r3, #4
 8001bce:	f7ff fd1f 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8001bd2:	4360      	muls	r0, r4
 8001bd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	fbb0 f7f3 	udiv	r7, r0, r3
 8001bde:	f7ff fd17 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8001be2:	4360      	muls	r0, r4
 8001be4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bf2:	fb08 7313 	mls	r3, r8, r3, r7
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	3332      	adds	r3, #50	; 0x32
 8001bfa:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bfe:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c02:	f7ff fd05 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8001c06:	4360      	muls	r0, r4
 8001c08:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	fbb0 faf2 	udiv	sl, r0, r2
 8001c12:	f7ff fcfd 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c16:	4360      	muls	r0, r4
 8001c18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c22:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c26:	fb08 a313 	mls	r3, r8, r3, sl
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	3332      	adds	r3, #50	; 0x32
 8001c2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	433b      	orrs	r3, r7
 8001c38:	4433      	add	r3, r6
 8001c3a:	60ab      	str	r3, [r5, #8]
 8001c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c40:	f7ff fcd6 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8001c44:	fb04 f300 	mul.w	r3, r4, r0
 8001c48:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001c4c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c50:	00b6      	lsls	r6, r6, #2
 8001c52:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c56:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c5a:	011e      	lsls	r6, r3, #4
 8001c5c:	f7ff fcc8 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8001c60:	4360      	muls	r0, r4
 8001c62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c6c:	f7ff fcc0 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8001c70:	4360      	muls	r0, r4
 8001c72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c80:	fb08 7313 	mls	r3, r8, r3, r7
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	; 0x32
 8001c88:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c8c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c90:	f7ff fcae 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8001c94:	4360      	muls	r0, r4
 8001c96:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	fbb0 faf2 	udiv	sl, r0, r2
 8001ca0:	f7ff fca6 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	e7b7      	b.n	8001c16 <UART_SetConfig+0xa6>
 8001ca6:	bf00      	nop
 8001ca8:	40013800 	.word	0x40013800

08001cac <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	4604      	mov	r4, r0
 8001cb0:	460e      	mov	r6, r1
 8001cb2:	4617      	mov	r7, r2
 8001cb4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001cb6:	6821      	ldr	r1, [r4, #0]
 8001cb8:	680b      	ldr	r3, [r1, #0]
 8001cba:	ea36 0303 	bics.w	r3, r6, r3
 8001cbe:	d101      	bne.n	8001cc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001cc0:	2000      	movs	r0, #0
}
 8001cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001cc4:	1c6b      	adds	r3, r5, #1
 8001cc6:	d0f7      	beq.n	8001cb8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cc8:	b995      	cbnz	r5, 8001cf0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cca:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001ccc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cf0:	f7ff f85c 	bl	8000dac <HAL_GetTick>
 8001cf4:	1bc0      	subs	r0, r0, r7
 8001cf6:	4285      	cmp	r5, r0
 8001cf8:	d2dd      	bcs.n	8001cb6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001cfa:	e7e6      	b.n	8001cca <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001cfc <HAL_UART_Init>:
{
 8001cfc:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b340      	cbz	r0, 8001d54 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d02:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d0a:	b91b      	cbnz	r3, 8001d14 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d0c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d10:	f7fe ff6c 	bl	8000bec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d14:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001d16:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d1c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d1e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d24:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d26:	f7ff ff23 	bl	8001b70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d3c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d44:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001d46:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d48:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d4e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
}
 8001d56:	bd10      	pop	{r4, pc}

08001d58 <HAL_UART_Transmit>:
{
 8001d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001d5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001d62:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001d64:	2b20      	cmp	r3, #32
{
 8001d66:	460d      	mov	r5, r1
 8001d68:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001d6a:	d14e      	bne.n	8001e0a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d049      	beq.n	8001e04 <HAL_UART_Transmit+0xac>
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d047      	beq.n	8001e04 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001d74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d046      	beq.n	8001e0a <HAL_UART_Transmit+0xb2>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d86:	2321      	movs	r3, #33	; 0x21
 8001d88:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d8c:	f7ff f80e 	bl	8000dac <HAL_GetTick>
 8001d90:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001d92:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d96:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d9a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b96b      	cbnz	r3, 8001dbc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001da0:	463b      	mov	r3, r7
 8001da2:	4632      	mov	r2, r6
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ff80 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001dac:	b9a8      	cbnz	r0, 8001dda <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001dae:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001db0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001db4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001dbc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dbe:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dc6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dce:	4620      	mov	r0, r4
 8001dd0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd2:	d10e      	bne.n	8001df2 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd4:	f7ff ff6a 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001dd8:	b110      	cbz	r0, 8001de0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001dda:	2003      	movs	r0, #3
 8001ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001de0:	882b      	ldrh	r3, [r5, #0]
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001dea:	6923      	ldr	r3, [r4, #16]
 8001dec:	b943      	cbnz	r3, 8001e00 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001dee:	3502      	adds	r5, #2
 8001df0:	e7d3      	b.n	8001d9a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df2:	f7ff ff5b 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1ef      	bne.n	8001dda <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	782a      	ldrb	r2, [r5, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	3501      	adds	r5, #1
 8001e02:	e7ca      	b.n	8001d9a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e04:	2001      	movs	r0, #1
 8001e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001e0a:	2002      	movs	r0, #2
}
 8001e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e10 <HAL_UART_Receive>:
{
 8001e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e14:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001e16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001e1a:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8001e1c:	2b20      	cmp	r3, #32
{
 8001e1e:	460d      	mov	r5, r1
 8001e20:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001e22:	d151      	bne.n	8001ec8 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 8001e24:	2900      	cmp	r1, #0
 8001e26:	d04c      	beq.n	8001ec2 <HAL_UART_Receive+0xb2>
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	d04a      	beq.n	8001ec2 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8001e2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d049      	beq.n	8001ec8 <HAL_UART_Receive+0xb8>
 8001e34:	2301      	movs	r3, #1
 8001e36:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e3e:	2322      	movs	r3, #34	; 0x22
 8001e40:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001e44:	f7fe ffb2 	bl	8000dac <HAL_GetTick>
 8001e48:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8001e4a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e4e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8001e52:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001e54:	b280      	uxth	r0, r0
 8001e56:	b930      	cbnz	r0, 8001e66 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001e58:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001e5a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8001e5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001e66:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e68:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e70:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e78:	4620      	mov	r0, r4
 8001e7a:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e7c:	d112      	bne.n	8001ea4 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e7e:	f7ff ff15 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e82:	b110      	cbz	r0, 8001e8a <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001e84:	2003      	movs	r0, #3
 8001e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e8a:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001e8c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e8e:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001e90:	b922      	cbnz	r2, 8001e9c <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e96:	f825 3b02 	strh.w	r3, [r5], #2
 8001e9a:	e7da      	b.n	8001e52 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f825 3b01 	strh.w	r3, [r5], #1
 8001ea2:	e7d6      	b.n	8001e52 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea4:	f7ff ff02 	bl	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_UART_Receive+0x74>
 8001eac:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001eae:	6921      	ldr	r1, [r4, #16]
 8001eb0:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eb2:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001eb4:	b911      	cbnz	r1, 8001ebc <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001eb6:	702b      	strb	r3, [r5, #0]
 8001eb8:	4615      	mov	r5, r2
 8001eba:	e7ca      	b.n	8001e52 <HAL_UART_Receive+0x42>
 8001ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ec0:	e7f9      	b.n	8001eb6 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001ec8:	2002      	movs	r0, #2
}
 8001eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ece <HAL_UART_TxCpltCallback>:
 8001ece:	4770      	bx	lr

08001ed0 <HAL_UART_RxCpltCallback>:
 8001ed0:	4770      	bx	lr

08001ed2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001ed2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001ed6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001ed8:	2b22      	cmp	r3, #34	; 0x22
 8001eda:	d136      	bne.n	8001f4a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001edc:	6883      	ldr	r3, [r0, #8]
 8001ede:	6901      	ldr	r1, [r0, #16]
 8001ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee4:	6802      	ldr	r2, [r0, #0]
 8001ee6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ee8:	d123      	bne.n	8001f32 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001eea:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001eec:	b9e9      	cbnz	r1, 8001f2a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001ef6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001ef8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001efa:	3c01      	subs	r4, #1
 8001efc:	b2a4      	uxth	r4, r4
 8001efe:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001f00:	b98c      	cbnz	r4, 8001f26 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	f022 0220 	bic.w	r2, r2, #32
 8001f0a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f12:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001f22:	f7ff ffd5 	bl	8001ed0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001f26:	2000      	movs	r0, #0
}
 8001f28:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f823 2b01 	strh.w	r2, [r3], #1
 8001f30:	e7e1      	b.n	8001ef6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f32:	b921      	cbnz	r1, 8001f3e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f34:	1c59      	adds	r1, r3, #1
 8001f36:	6852      	ldr	r2, [r2, #4]
 8001f38:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e7dc      	b.n	8001ef8 <UART_Receive_IT+0x26>
 8001f3e:	6852      	ldr	r2, [r2, #4]
 8001f40:	1c59      	adds	r1, r3, #1
 8001f42:	6281      	str	r1, [r0, #40]	; 0x28
 8001f44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f48:	e7f7      	b.n	8001f3a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	bd10      	pop	{r4, pc}

08001f4e <HAL_UART_ErrorCallback>:
 8001f4e:	4770      	bx	lr

08001f50 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f50:	6803      	ldr	r3, [r0, #0]
{
 8001f52:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f54:	681a      	ldr	r2, [r3, #0]
{
 8001f56:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001f58:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f5a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f5c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001f5e:	d107      	bne.n	8001f70 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f60:	0696      	lsls	r6, r2, #26
 8001f62:	d55a      	bpl.n	800201a <HAL_UART_IRQHandler+0xca>
 8001f64:	068d      	lsls	r5, r1, #26
 8001f66:	d558      	bpl.n	800201a <HAL_UART_IRQHandler+0xca>
}
 8001f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001f6c:	f7ff bfb1 	b.w	8001ed2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f70:	f015 0501 	ands.w	r5, r5, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_UART_IRQHandler+0x2c>
 8001f76:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001f7a:	d04e      	beq.n	800201a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f7c:	07d3      	lsls	r3, r2, #31
 8001f7e:	d505      	bpl.n	8001f8c <HAL_UART_IRQHandler+0x3c>
 8001f80:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f82:	bf42      	ittt	mi
 8001f84:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001f86:	f043 0301 	orrmi.w	r3, r3, #1
 8001f8a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f8c:	0750      	lsls	r0, r2, #29
 8001f8e:	d504      	bpl.n	8001f9a <HAL_UART_IRQHandler+0x4a>
 8001f90:	b11d      	cbz	r5, 8001f9a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f9a:	0793      	lsls	r3, r2, #30
 8001f9c:	d504      	bpl.n	8001fa8 <HAL_UART_IRQHandler+0x58>
 8001f9e:	b11d      	cbz	r5, 8001fa8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fa8:	0716      	lsls	r6, r2, #28
 8001faa:	d504      	bpl.n	8001fb6 <HAL_UART_IRQHandler+0x66>
 8001fac:	b11d      	cbz	r5, 8001fb6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d066      	beq.n	800208a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fbc:	0695      	lsls	r5, r2, #26
 8001fbe:	d504      	bpl.n	8001fca <HAL_UART_IRQHandler+0x7a>
 8001fc0:	0688      	lsls	r0, r1, #26
 8001fc2:	d502      	bpl.n	8001fca <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff84 	bl	8001ed2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fca:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001fcc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fce:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fd2:	0711      	lsls	r1, r2, #28
 8001fd4:	d402      	bmi.n	8001fdc <HAL_UART_IRQHandler+0x8c>
 8001fd6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001fda:	d01a      	beq.n	8002012 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001fdc:	f7ff fdba 	bl	8001b54 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	0652      	lsls	r2, r2, #25
 8001fe6:	d510      	bpl.n	800200a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fe8:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001fea:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001ff2:	b150      	cbz	r0, 800200a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_UART_IRQHandler+0x13c>)
 8001ff6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ff8:	f7fe ff58 	bl	8000eac <HAL_DMA_Abort_IT>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d044      	beq.n	800208a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002000:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002006:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002008:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff ff9f 	bl	8001f4e <HAL_UART_ErrorCallback>
 8002010:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002012:	f7ff ff9c 	bl	8001f4e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002018:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800201a:	0616      	lsls	r6, r2, #24
 800201c:	d527      	bpl.n	800206e <HAL_UART_IRQHandler+0x11e>
 800201e:	060d      	lsls	r5, r1, #24
 8002020:	d525      	bpl.n	800206e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002022:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002026:	2a21      	cmp	r2, #33	; 0x21
 8002028:	d12f      	bne.n	800208a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800202a:	68a2      	ldr	r2, [r4, #8]
 800202c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002030:	6a22      	ldr	r2, [r4, #32]
 8002032:	d117      	bne.n	8002064 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002034:	8811      	ldrh	r1, [r2, #0]
 8002036:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800203a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800203c:	6921      	ldr	r1, [r4, #16]
 800203e:	b979      	cbnz	r1, 8002060 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002040:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002042:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002044:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002046:	3a01      	subs	r2, #1
 8002048:	b292      	uxth	r2, r2
 800204a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800204c:	b9ea      	cbnz	r2, 800208a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002054:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002060:	3201      	adds	r2, #1
 8002062:	e7ee      	b.n	8002042 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002064:	1c51      	adds	r1, r2, #1
 8002066:	6221      	str	r1, [r4, #32]
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	e7ea      	b.n	8002044 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800206e:	0650      	lsls	r0, r2, #25
 8002070:	d50b      	bpl.n	800208a <HAL_UART_IRQHandler+0x13a>
 8002072:	064a      	lsls	r2, r1, #25
 8002074:	d509      	bpl.n	800208a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002076:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002078:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002080:	2320      	movs	r3, #32
 8002082:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002086:	f7ff ff22 	bl	8001ece <HAL_UART_TxCpltCallback>
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	08002091 	.word	0x08002091

08002090 <UART_DMAAbortOnError>:
{
 8002090:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002092:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002094:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002096:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002098:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800209a:	f7ff ff58 	bl	8001f4e <HAL_UART_ErrorCallback>
 800209e:	bd08      	pop	{r3, pc}

080020a0 <__errno>:
 80020a0:	4b01      	ldr	r3, [pc, #4]	; (80020a8 <__errno+0x8>)
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000004 	.word	0x20000004

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2500      	movs	r5, #0
 80020b0:	4e0c      	ldr	r6, [pc, #48]	; (80020e4 <__libc_init_array+0x38>)
 80020b2:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b4:	1ba4      	subs	r4, r4, r6
 80020b6:	10a4      	asrs	r4, r4, #2
 80020b8:	42a5      	cmp	r5, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	f000 ff26 	bl	8002f0c <_init>
 80020c0:	2500      	movs	r5, #0
 80020c2:	4e0a      	ldr	r6, [pc, #40]	; (80020ec <__libc_init_array+0x40>)
 80020c4:	4c0a      	ldr	r4, [pc, #40]	; (80020f0 <__libc_init_array+0x44>)
 80020c6:	1ba4      	subs	r4, r4, r6
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	42a5      	cmp	r5, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d4:	4798      	blx	r3
 80020d6:	3501      	adds	r5, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020de:	4798      	blx	r3
 80020e0:	3501      	adds	r5, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	08003004 	.word	0x08003004
 80020e8:	08003004 	.word	0x08003004
 80020ec:	08003004 	.word	0x08003004
 80020f0:	08003008 	.word	0x08003008

080020f4 <memset>:
 80020f4:	4603      	mov	r3, r0
 80020f6:	4402      	add	r2, r0
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d100      	bne.n	80020fe <memset+0xa>
 80020fc:	4770      	bx	lr
 80020fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002102:	e7f9      	b.n	80020f8 <memset+0x4>

08002104 <iprintf>:
 8002104:	b40f      	push	{r0, r1, r2, r3}
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <iprintf+0x2c>)
 8002108:	b513      	push	{r0, r1, r4, lr}
 800210a:	681c      	ldr	r4, [r3, #0]
 800210c:	b124      	cbz	r4, 8002118 <iprintf+0x14>
 800210e:	69a3      	ldr	r3, [r4, #24]
 8002110:	b913      	cbnz	r3, 8002118 <iprintf+0x14>
 8002112:	4620      	mov	r0, r4
 8002114:	f000 f84e 	bl	80021b4 <__sinit>
 8002118:	ab05      	add	r3, sp, #20
 800211a:	9a04      	ldr	r2, [sp, #16]
 800211c:	68a1      	ldr	r1, [r4, #8]
 800211e:	4620      	mov	r0, r4
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f000 f957 	bl	80023d4 <_vfiprintf_r>
 8002126:	b002      	add	sp, #8
 8002128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800212c:	b004      	add	sp, #16
 800212e:	4770      	bx	lr
 8002130:	20000004 	.word	0x20000004

08002134 <_cleanup_r>:
 8002134:	4901      	ldr	r1, [pc, #4]	; (800213c <_cleanup_r+0x8>)
 8002136:	f000 b8a9 	b.w	800228c <_fwalk_reent>
 800213a:	bf00      	nop
 800213c:	08002cad 	.word	0x08002cad

08002140 <std.isra.0>:
 8002140:	2300      	movs	r3, #0
 8002142:	b510      	push	{r4, lr}
 8002144:	4604      	mov	r4, r0
 8002146:	6003      	str	r3, [r0, #0]
 8002148:	6043      	str	r3, [r0, #4]
 800214a:	6083      	str	r3, [r0, #8]
 800214c:	8181      	strh	r1, [r0, #12]
 800214e:	6643      	str	r3, [r0, #100]	; 0x64
 8002150:	81c2      	strh	r2, [r0, #14]
 8002152:	6103      	str	r3, [r0, #16]
 8002154:	6143      	str	r3, [r0, #20]
 8002156:	6183      	str	r3, [r0, #24]
 8002158:	4619      	mov	r1, r3
 800215a:	2208      	movs	r2, #8
 800215c:	305c      	adds	r0, #92	; 0x5c
 800215e:	f7ff ffc9 	bl	80020f4 <memset>
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <std.isra.0+0x38>)
 8002164:	6224      	str	r4, [r4, #32]
 8002166:	6263      	str	r3, [r4, #36]	; 0x24
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <std.isra.0+0x3c>)
 800216a:	62a3      	str	r3, [r4, #40]	; 0x28
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <std.isra.0+0x40>)
 800216e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <std.isra.0+0x44>)
 8002172:	6323      	str	r3, [r4, #48]	; 0x30
 8002174:	bd10      	pop	{r4, pc}
 8002176:	bf00      	nop
 8002178:	08002951 	.word	0x08002951
 800217c:	08002973 	.word	0x08002973
 8002180:	080029ab 	.word	0x080029ab
 8002184:	080029cf 	.word	0x080029cf

08002188 <__sfmoreglue>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	2568      	movs	r5, #104	; 0x68
 800218c:	1e4a      	subs	r2, r1, #1
 800218e:	4355      	muls	r5, r2
 8002190:	460e      	mov	r6, r1
 8002192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002196:	f000 f897 	bl	80022c8 <_malloc_r>
 800219a:	4604      	mov	r4, r0
 800219c:	b140      	cbz	r0, 80021b0 <__sfmoreglue+0x28>
 800219e:	2100      	movs	r1, #0
 80021a0:	e880 0042 	stmia.w	r0, {r1, r6}
 80021a4:	300c      	adds	r0, #12
 80021a6:	60a0      	str	r0, [r4, #8]
 80021a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021ac:	f7ff ffa2 	bl	80020f4 <memset>
 80021b0:	4620      	mov	r0, r4
 80021b2:	bd70      	pop	{r4, r5, r6, pc}

080021b4 <__sinit>:
 80021b4:	6983      	ldr	r3, [r0, #24]
 80021b6:	b510      	push	{r4, lr}
 80021b8:	4604      	mov	r4, r0
 80021ba:	bb33      	cbnz	r3, 800220a <__sinit+0x56>
 80021bc:	6483      	str	r3, [r0, #72]	; 0x48
 80021be:	64c3      	str	r3, [r0, #76]	; 0x4c
 80021c0:	6503      	str	r3, [r0, #80]	; 0x50
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <__sinit+0x58>)
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <__sinit+0x5c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6282      	str	r2, [r0, #40]	; 0x28
 80021ca:	4298      	cmp	r0, r3
 80021cc:	bf04      	itt	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	6183      	streq	r3, [r0, #24]
 80021d2:	f000 f81f 	bl	8002214 <__sfp>
 80021d6:	6060      	str	r0, [r4, #4]
 80021d8:	4620      	mov	r0, r4
 80021da:	f000 f81b 	bl	8002214 <__sfp>
 80021de:	60a0      	str	r0, [r4, #8]
 80021e0:	4620      	mov	r0, r4
 80021e2:	f000 f817 	bl	8002214 <__sfp>
 80021e6:	2200      	movs	r2, #0
 80021e8:	60e0      	str	r0, [r4, #12]
 80021ea:	2104      	movs	r1, #4
 80021ec:	6860      	ldr	r0, [r4, #4]
 80021ee:	f7ff ffa7 	bl	8002140 <std.isra.0>
 80021f2:	2201      	movs	r2, #1
 80021f4:	2109      	movs	r1, #9
 80021f6:	68a0      	ldr	r0, [r4, #8]
 80021f8:	f7ff ffa2 	bl	8002140 <std.isra.0>
 80021fc:	2202      	movs	r2, #2
 80021fe:	2112      	movs	r1, #18
 8002200:	68e0      	ldr	r0, [r4, #12]
 8002202:	f7ff ff9d 	bl	8002140 <std.isra.0>
 8002206:	2301      	movs	r3, #1
 8002208:	61a3      	str	r3, [r4, #24]
 800220a:	bd10      	pop	{r4, pc}
 800220c:	08002f6c 	.word	0x08002f6c
 8002210:	08002135 	.word	0x08002135

08002214 <__sfp>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <__sfp+0x74>)
 8002218:	4607      	mov	r7, r0
 800221a:	681e      	ldr	r6, [r3, #0]
 800221c:	69b3      	ldr	r3, [r6, #24]
 800221e:	b913      	cbnz	r3, 8002226 <__sfp+0x12>
 8002220:	4630      	mov	r0, r6
 8002222:	f7ff ffc7 	bl	80021b4 <__sinit>
 8002226:	3648      	adds	r6, #72	; 0x48
 8002228:	68b4      	ldr	r4, [r6, #8]
 800222a:	6873      	ldr	r3, [r6, #4]
 800222c:	3b01      	subs	r3, #1
 800222e:	d503      	bpl.n	8002238 <__sfp+0x24>
 8002230:	6833      	ldr	r3, [r6, #0]
 8002232:	b133      	cbz	r3, 8002242 <__sfp+0x2e>
 8002234:	6836      	ldr	r6, [r6, #0]
 8002236:	e7f7      	b.n	8002228 <__sfp+0x14>
 8002238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800223c:	b16d      	cbz	r5, 800225a <__sfp+0x46>
 800223e:	3468      	adds	r4, #104	; 0x68
 8002240:	e7f4      	b.n	800222c <__sfp+0x18>
 8002242:	2104      	movs	r1, #4
 8002244:	4638      	mov	r0, r7
 8002246:	f7ff ff9f 	bl	8002188 <__sfmoreglue>
 800224a:	6030      	str	r0, [r6, #0]
 800224c:	2800      	cmp	r0, #0
 800224e:	d1f1      	bne.n	8002234 <__sfp+0x20>
 8002250:	230c      	movs	r3, #12
 8002252:	4604      	mov	r4, r0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4620      	mov	r0, r4
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225e:	81e3      	strh	r3, [r4, #14]
 8002260:	2301      	movs	r3, #1
 8002262:	6665      	str	r5, [r4, #100]	; 0x64
 8002264:	81a3      	strh	r3, [r4, #12]
 8002266:	6025      	str	r5, [r4, #0]
 8002268:	60a5      	str	r5, [r4, #8]
 800226a:	6065      	str	r5, [r4, #4]
 800226c:	6125      	str	r5, [r4, #16]
 800226e:	6165      	str	r5, [r4, #20]
 8002270:	61a5      	str	r5, [r4, #24]
 8002272:	2208      	movs	r2, #8
 8002274:	4629      	mov	r1, r5
 8002276:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800227a:	f7ff ff3b 	bl	80020f4 <memset>
 800227e:	6365      	str	r5, [r4, #52]	; 0x34
 8002280:	63a5      	str	r5, [r4, #56]	; 0x38
 8002282:	64a5      	str	r5, [r4, #72]	; 0x48
 8002284:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002286:	e7e6      	b.n	8002256 <__sfp+0x42>
 8002288:	08002f6c 	.word	0x08002f6c

0800228c <_fwalk_reent>:
 800228c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002290:	4680      	mov	r8, r0
 8002292:	4689      	mov	r9, r1
 8002294:	2600      	movs	r6, #0
 8002296:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800229a:	b914      	cbnz	r4, 80022a2 <_fwalk_reent+0x16>
 800229c:	4630      	mov	r0, r6
 800229e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022a2:	68a5      	ldr	r5, [r4, #8]
 80022a4:	6867      	ldr	r7, [r4, #4]
 80022a6:	3f01      	subs	r7, #1
 80022a8:	d501      	bpl.n	80022ae <_fwalk_reent+0x22>
 80022aa:	6824      	ldr	r4, [r4, #0]
 80022ac:	e7f5      	b.n	800229a <_fwalk_reent+0xe>
 80022ae:	89ab      	ldrh	r3, [r5, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d907      	bls.n	80022c4 <_fwalk_reent+0x38>
 80022b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022b8:	3301      	adds	r3, #1
 80022ba:	d003      	beq.n	80022c4 <_fwalk_reent+0x38>
 80022bc:	4629      	mov	r1, r5
 80022be:	4640      	mov	r0, r8
 80022c0:	47c8      	blx	r9
 80022c2:	4306      	orrs	r6, r0
 80022c4:	3568      	adds	r5, #104	; 0x68
 80022c6:	e7ee      	b.n	80022a6 <_fwalk_reent+0x1a>

080022c8 <_malloc_r>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	1ccd      	adds	r5, r1, #3
 80022cc:	f025 0503 	bic.w	r5, r5, #3
 80022d0:	3508      	adds	r5, #8
 80022d2:	2d0c      	cmp	r5, #12
 80022d4:	bf38      	it	cc
 80022d6:	250c      	movcc	r5, #12
 80022d8:	2d00      	cmp	r5, #0
 80022da:	4606      	mov	r6, r0
 80022dc:	db01      	blt.n	80022e2 <_malloc_r+0x1a>
 80022de:	42a9      	cmp	r1, r5
 80022e0:	d903      	bls.n	80022ea <_malloc_r+0x22>
 80022e2:	230c      	movs	r3, #12
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	2000      	movs	r0, #0
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
 80022ea:	f000 fd8d 	bl	8002e08 <__malloc_lock>
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <_malloc_r+0xb4>)
 80022f0:	6814      	ldr	r4, [r2, #0]
 80022f2:	4621      	mov	r1, r4
 80022f4:	b991      	cbnz	r1, 800231c <_malloc_r+0x54>
 80022f6:	4c22      	ldr	r4, [pc, #136]	; (8002380 <_malloc_r+0xb8>)
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	b91b      	cbnz	r3, 8002304 <_malloc_r+0x3c>
 80022fc:	4630      	mov	r0, r6
 80022fe:	f000 fb17 	bl	8002930 <_sbrk_r>
 8002302:	6020      	str	r0, [r4, #0]
 8002304:	4629      	mov	r1, r5
 8002306:	4630      	mov	r0, r6
 8002308:	f000 fb12 	bl	8002930 <_sbrk_r>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d126      	bne.n	800235e <_malloc_r+0x96>
 8002310:	230c      	movs	r3, #12
 8002312:	4630      	mov	r0, r6
 8002314:	6033      	str	r3, [r6, #0]
 8002316:	f000 fd78 	bl	8002e0a <__malloc_unlock>
 800231a:	e7e4      	b.n	80022e6 <_malloc_r+0x1e>
 800231c:	680b      	ldr	r3, [r1, #0]
 800231e:	1b5b      	subs	r3, r3, r5
 8002320:	d41a      	bmi.n	8002358 <_malloc_r+0x90>
 8002322:	2b0b      	cmp	r3, #11
 8002324:	d90f      	bls.n	8002346 <_malloc_r+0x7e>
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	18cc      	adds	r4, r1, r3
 800232a:	50cd      	str	r5, [r1, r3]
 800232c:	4630      	mov	r0, r6
 800232e:	f000 fd6c 	bl	8002e0a <__malloc_unlock>
 8002332:	f104 000b 	add.w	r0, r4, #11
 8002336:	1d23      	adds	r3, r4, #4
 8002338:	f020 0007 	bic.w	r0, r0, #7
 800233c:	1ac3      	subs	r3, r0, r3
 800233e:	d01b      	beq.n	8002378 <_malloc_r+0xb0>
 8002340:	425a      	negs	r2, r3
 8002342:	50e2      	str	r2, [r4, r3]
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	428c      	cmp	r4, r1
 8002348:	bf0b      	itete	eq
 800234a:	6863      	ldreq	r3, [r4, #4]
 800234c:	684b      	ldrne	r3, [r1, #4]
 800234e:	6013      	streq	r3, [r2, #0]
 8002350:	6063      	strne	r3, [r4, #4]
 8002352:	bf18      	it	ne
 8002354:	460c      	movne	r4, r1
 8002356:	e7e9      	b.n	800232c <_malloc_r+0x64>
 8002358:	460c      	mov	r4, r1
 800235a:	6849      	ldr	r1, [r1, #4]
 800235c:	e7ca      	b.n	80022f4 <_malloc_r+0x2c>
 800235e:	1cc4      	adds	r4, r0, #3
 8002360:	f024 0403 	bic.w	r4, r4, #3
 8002364:	42a0      	cmp	r0, r4
 8002366:	d005      	beq.n	8002374 <_malloc_r+0xac>
 8002368:	1a21      	subs	r1, r4, r0
 800236a:	4630      	mov	r0, r6
 800236c:	f000 fae0 	bl	8002930 <_sbrk_r>
 8002370:	3001      	adds	r0, #1
 8002372:	d0cd      	beq.n	8002310 <_malloc_r+0x48>
 8002374:	6025      	str	r5, [r4, #0]
 8002376:	e7d9      	b.n	800232c <_malloc_r+0x64>
 8002378:	bd70      	pop	{r4, r5, r6, pc}
 800237a:	bf00      	nop
 800237c:	2000009c 	.word	0x2000009c
 8002380:	200000a0 	.word	0x200000a0

08002384 <__sfputc_r>:
 8002384:	6893      	ldr	r3, [r2, #8]
 8002386:	b410      	push	{r4}
 8002388:	3b01      	subs	r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	6093      	str	r3, [r2, #8]
 800238e:	da08      	bge.n	80023a2 <__sfputc_r+0x1e>
 8002390:	6994      	ldr	r4, [r2, #24]
 8002392:	42a3      	cmp	r3, r4
 8002394:	db02      	blt.n	800239c <__sfputc_r+0x18>
 8002396:	b2cb      	uxtb	r3, r1
 8002398:	2b0a      	cmp	r3, #10
 800239a:	d102      	bne.n	80023a2 <__sfputc_r+0x1e>
 800239c:	bc10      	pop	{r4}
 800239e:	f000 bb1b 	b.w	80029d8 <__swbuf_r>
 80023a2:	6813      	ldr	r3, [r2, #0]
 80023a4:	1c58      	adds	r0, r3, #1
 80023a6:	6010      	str	r0, [r2, #0]
 80023a8:	7019      	strb	r1, [r3, #0]
 80023aa:	b2c8      	uxtb	r0, r1
 80023ac:	bc10      	pop	{r4}
 80023ae:	4770      	bx	lr

080023b0 <__sfputs_r>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	4606      	mov	r6, r0
 80023b4:	460f      	mov	r7, r1
 80023b6:	4614      	mov	r4, r2
 80023b8:	18d5      	adds	r5, r2, r3
 80023ba:	42ac      	cmp	r4, r5
 80023bc:	d101      	bne.n	80023c2 <__sfputs_r+0x12>
 80023be:	2000      	movs	r0, #0
 80023c0:	e007      	b.n	80023d2 <__sfputs_r+0x22>
 80023c2:	463a      	mov	r2, r7
 80023c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023c8:	4630      	mov	r0, r6
 80023ca:	f7ff ffdb 	bl	8002384 <__sfputc_r>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	d1f3      	bne.n	80023ba <__sfputs_r+0xa>
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023d4 <_vfiprintf_r>:
 80023d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d8:	b09d      	sub	sp, #116	; 0x74
 80023da:	460c      	mov	r4, r1
 80023dc:	4617      	mov	r7, r2
 80023de:	9303      	str	r3, [sp, #12]
 80023e0:	4606      	mov	r6, r0
 80023e2:	b118      	cbz	r0, 80023ec <_vfiprintf_r+0x18>
 80023e4:	6983      	ldr	r3, [r0, #24]
 80023e6:	b90b      	cbnz	r3, 80023ec <_vfiprintf_r+0x18>
 80023e8:	f7ff fee4 	bl	80021b4 <__sinit>
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <_vfiprintf_r+0x20c>)
 80023ee:	429c      	cmp	r4, r3
 80023f0:	d157      	bne.n	80024a2 <_vfiprintf_r+0xce>
 80023f2:	6874      	ldr	r4, [r6, #4]
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	0718      	lsls	r0, r3, #28
 80023f8:	d55d      	bpl.n	80024b6 <_vfiprintf_r+0xe2>
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05a      	beq.n	80024b6 <_vfiprintf_r+0xe2>
 8002400:	2300      	movs	r3, #0
 8002402:	9309      	str	r3, [sp, #36]	; 0x24
 8002404:	2320      	movs	r3, #32
 8002406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800240a:	2330      	movs	r3, #48	; 0x30
 800240c:	f04f 0b01 	mov.w	fp, #1
 8002410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002414:	46b8      	mov	r8, r7
 8002416:	4645      	mov	r5, r8
 8002418:	f815 3b01 	ldrb.w	r3, [r5], #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d155      	bne.n	80024cc <_vfiprintf_r+0xf8>
 8002420:	ebb8 0a07 	subs.w	sl, r8, r7
 8002424:	d00b      	beq.n	800243e <_vfiprintf_r+0x6a>
 8002426:	4653      	mov	r3, sl
 8002428:	463a      	mov	r2, r7
 800242a:	4621      	mov	r1, r4
 800242c:	4630      	mov	r0, r6
 800242e:	f7ff ffbf 	bl	80023b0 <__sfputs_r>
 8002432:	3001      	adds	r0, #1
 8002434:	f000 80c4 	beq.w	80025c0 <_vfiprintf_r+0x1ec>
 8002438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800243a:	4453      	add	r3, sl
 800243c:	9309      	str	r3, [sp, #36]	; 0x24
 800243e:	f898 3000 	ldrb.w	r3, [r8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80bc 	beq.w	80025c0 <_vfiprintf_r+0x1ec>
 8002448:	2300      	movs	r3, #0
 800244a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800244e:	9304      	str	r3, [sp, #16]
 8002450:	9307      	str	r3, [sp, #28]
 8002452:	9205      	str	r2, [sp, #20]
 8002454:	9306      	str	r3, [sp, #24]
 8002456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800245a:	931a      	str	r3, [sp, #104]	; 0x68
 800245c:	2205      	movs	r2, #5
 800245e:	7829      	ldrb	r1, [r5, #0]
 8002460:	4860      	ldr	r0, [pc, #384]	; (80025e4 <_vfiprintf_r+0x210>)
 8002462:	f000 fcc3 	bl	8002dec <memchr>
 8002466:	f105 0801 	add.w	r8, r5, #1
 800246a:	9b04      	ldr	r3, [sp, #16]
 800246c:	2800      	cmp	r0, #0
 800246e:	d131      	bne.n	80024d4 <_vfiprintf_r+0x100>
 8002470:	06d9      	lsls	r1, r3, #27
 8002472:	bf44      	itt	mi
 8002474:	2220      	movmi	r2, #32
 8002476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800247a:	071a      	lsls	r2, r3, #28
 800247c:	bf44      	itt	mi
 800247e:	222b      	movmi	r2, #43	; 0x2b
 8002480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002484:	782a      	ldrb	r2, [r5, #0]
 8002486:	2a2a      	cmp	r2, #42	; 0x2a
 8002488:	d02c      	beq.n	80024e4 <_vfiprintf_r+0x110>
 800248a:	2100      	movs	r1, #0
 800248c:	200a      	movs	r0, #10
 800248e:	9a07      	ldr	r2, [sp, #28]
 8002490:	46a8      	mov	r8, r5
 8002492:	f898 3000 	ldrb.w	r3, [r8]
 8002496:	3501      	adds	r5, #1
 8002498:	3b30      	subs	r3, #48	; 0x30
 800249a:	2b09      	cmp	r3, #9
 800249c:	d96d      	bls.n	800257a <_vfiprintf_r+0x1a6>
 800249e:	b371      	cbz	r1, 80024fe <_vfiprintf_r+0x12a>
 80024a0:	e026      	b.n	80024f0 <_vfiprintf_r+0x11c>
 80024a2:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <_vfiprintf_r+0x214>)
 80024a4:	429c      	cmp	r4, r3
 80024a6:	d101      	bne.n	80024ac <_vfiprintf_r+0xd8>
 80024a8:	68b4      	ldr	r4, [r6, #8]
 80024aa:	e7a3      	b.n	80023f4 <_vfiprintf_r+0x20>
 80024ac:	4b4f      	ldr	r3, [pc, #316]	; (80025ec <_vfiprintf_r+0x218>)
 80024ae:	429c      	cmp	r4, r3
 80024b0:	bf08      	it	eq
 80024b2:	68f4      	ldreq	r4, [r6, #12]
 80024b4:	e79e      	b.n	80023f4 <_vfiprintf_r+0x20>
 80024b6:	4621      	mov	r1, r4
 80024b8:	4630      	mov	r0, r6
 80024ba:	f000 faf1 	bl	8002aa0 <__swsetup_r>
 80024be:	2800      	cmp	r0, #0
 80024c0:	d09e      	beq.n	8002400 <_vfiprintf_r+0x2c>
 80024c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c6:	b01d      	add	sp, #116	; 0x74
 80024c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024cc:	2b25      	cmp	r3, #37	; 0x25
 80024ce:	d0a7      	beq.n	8002420 <_vfiprintf_r+0x4c>
 80024d0:	46a8      	mov	r8, r5
 80024d2:	e7a0      	b.n	8002416 <_vfiprintf_r+0x42>
 80024d4:	4a43      	ldr	r2, [pc, #268]	; (80025e4 <_vfiprintf_r+0x210>)
 80024d6:	4645      	mov	r5, r8
 80024d8:	1a80      	subs	r0, r0, r2
 80024da:	fa0b f000 	lsl.w	r0, fp, r0
 80024de:	4318      	orrs	r0, r3
 80024e0:	9004      	str	r0, [sp, #16]
 80024e2:	e7bb      	b.n	800245c <_vfiprintf_r+0x88>
 80024e4:	9a03      	ldr	r2, [sp, #12]
 80024e6:	1d11      	adds	r1, r2, #4
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	9103      	str	r1, [sp, #12]
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	db01      	blt.n	80024f4 <_vfiprintf_r+0x120>
 80024f0:	9207      	str	r2, [sp, #28]
 80024f2:	e004      	b.n	80024fe <_vfiprintf_r+0x12a>
 80024f4:	4252      	negs	r2, r2
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	9207      	str	r2, [sp, #28]
 80024fc:	9304      	str	r3, [sp, #16]
 80024fe:	f898 3000 	ldrb.w	r3, [r8]
 8002502:	2b2e      	cmp	r3, #46	; 0x2e
 8002504:	d110      	bne.n	8002528 <_vfiprintf_r+0x154>
 8002506:	f898 3001 	ldrb.w	r3, [r8, #1]
 800250a:	f108 0101 	add.w	r1, r8, #1
 800250e:	2b2a      	cmp	r3, #42	; 0x2a
 8002510:	d137      	bne.n	8002582 <_vfiprintf_r+0x1ae>
 8002512:	9b03      	ldr	r3, [sp, #12]
 8002514:	f108 0802 	add.w	r8, r8, #2
 8002518:	1d1a      	adds	r2, r3, #4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	9203      	str	r2, [sp, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	bfb8      	it	lt
 8002522:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002526:	9305      	str	r3, [sp, #20]
 8002528:	4d31      	ldr	r5, [pc, #196]	; (80025f0 <_vfiprintf_r+0x21c>)
 800252a:	2203      	movs	r2, #3
 800252c:	f898 1000 	ldrb.w	r1, [r8]
 8002530:	4628      	mov	r0, r5
 8002532:	f000 fc5b 	bl	8002dec <memchr>
 8002536:	b140      	cbz	r0, 800254a <_vfiprintf_r+0x176>
 8002538:	2340      	movs	r3, #64	; 0x40
 800253a:	1b40      	subs	r0, r0, r5
 800253c:	fa03 f000 	lsl.w	r0, r3, r0
 8002540:	9b04      	ldr	r3, [sp, #16]
 8002542:	f108 0801 	add.w	r8, r8, #1
 8002546:	4303      	orrs	r3, r0
 8002548:	9304      	str	r3, [sp, #16]
 800254a:	f898 1000 	ldrb.w	r1, [r8]
 800254e:	2206      	movs	r2, #6
 8002550:	4828      	ldr	r0, [pc, #160]	; (80025f4 <_vfiprintf_r+0x220>)
 8002552:	f108 0701 	add.w	r7, r8, #1
 8002556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800255a:	f000 fc47 	bl	8002dec <memchr>
 800255e:	2800      	cmp	r0, #0
 8002560:	d034      	beq.n	80025cc <_vfiprintf_r+0x1f8>
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <_vfiprintf_r+0x224>)
 8002564:	bb03      	cbnz	r3, 80025a8 <_vfiprintf_r+0x1d4>
 8002566:	9b03      	ldr	r3, [sp, #12]
 8002568:	3307      	adds	r3, #7
 800256a:	f023 0307 	bic.w	r3, r3, #7
 800256e:	3308      	adds	r3, #8
 8002570:	9303      	str	r3, [sp, #12]
 8002572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002574:	444b      	add	r3, r9
 8002576:	9309      	str	r3, [sp, #36]	; 0x24
 8002578:	e74c      	b.n	8002414 <_vfiprintf_r+0x40>
 800257a:	fb00 3202 	mla	r2, r0, r2, r3
 800257e:	2101      	movs	r1, #1
 8002580:	e786      	b.n	8002490 <_vfiprintf_r+0xbc>
 8002582:	2300      	movs	r3, #0
 8002584:	250a      	movs	r5, #10
 8002586:	4618      	mov	r0, r3
 8002588:	9305      	str	r3, [sp, #20]
 800258a:	4688      	mov	r8, r1
 800258c:	f898 2000 	ldrb.w	r2, [r8]
 8002590:	3101      	adds	r1, #1
 8002592:	3a30      	subs	r2, #48	; 0x30
 8002594:	2a09      	cmp	r2, #9
 8002596:	d903      	bls.n	80025a0 <_vfiprintf_r+0x1cc>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0c5      	beq.n	8002528 <_vfiprintf_r+0x154>
 800259c:	9005      	str	r0, [sp, #20]
 800259e:	e7c3      	b.n	8002528 <_vfiprintf_r+0x154>
 80025a0:	fb05 2000 	mla	r0, r5, r0, r2
 80025a4:	2301      	movs	r3, #1
 80025a6:	e7f0      	b.n	800258a <_vfiprintf_r+0x1b6>
 80025a8:	ab03      	add	r3, sp, #12
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4622      	mov	r2, r4
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_vfiprintf_r+0x228>)
 80025b0:	a904      	add	r1, sp, #16
 80025b2:	4630      	mov	r0, r6
 80025b4:	f3af 8000 	nop.w
 80025b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80025bc:	4681      	mov	r9, r0
 80025be:	d1d8      	bne.n	8002572 <_vfiprintf_r+0x19e>
 80025c0:	89a3      	ldrh	r3, [r4, #12]
 80025c2:	065b      	lsls	r3, r3, #25
 80025c4:	f53f af7d 	bmi.w	80024c2 <_vfiprintf_r+0xee>
 80025c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ca:	e77c      	b.n	80024c6 <_vfiprintf_r+0xf2>
 80025cc:	ab03      	add	r3, sp, #12
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4622      	mov	r2, r4
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <_vfiprintf_r+0x228>)
 80025d4:	a904      	add	r1, sp, #16
 80025d6:	4630      	mov	r0, r6
 80025d8:	f000 f88a 	bl	80026f0 <_printf_i>
 80025dc:	e7ec      	b.n	80025b8 <_vfiprintf_r+0x1e4>
 80025de:	bf00      	nop
 80025e0:	08002f90 	.word	0x08002f90
 80025e4:	08002fd0 	.word	0x08002fd0
 80025e8:	08002fb0 	.word	0x08002fb0
 80025ec:	08002f70 	.word	0x08002f70
 80025f0:	08002fd6 	.word	0x08002fd6
 80025f4:	08002fda 	.word	0x08002fda
 80025f8:	00000000 	.word	0x00000000
 80025fc:	080023b1 	.word	0x080023b1

08002600 <_printf_common>:
 8002600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002604:	4691      	mov	r9, r2
 8002606:	461f      	mov	r7, r3
 8002608:	688a      	ldr	r2, [r1, #8]
 800260a:	690b      	ldr	r3, [r1, #16]
 800260c:	4606      	mov	r6, r0
 800260e:	4293      	cmp	r3, r2
 8002610:	bfb8      	it	lt
 8002612:	4613      	movlt	r3, r2
 8002614:	f8c9 3000 	str.w	r3, [r9]
 8002618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800261c:	460c      	mov	r4, r1
 800261e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002622:	b112      	cbz	r2, 800262a <_printf_common+0x2a>
 8002624:	3301      	adds	r3, #1
 8002626:	f8c9 3000 	str.w	r3, [r9]
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	0699      	lsls	r1, r3, #26
 800262e:	bf42      	ittt	mi
 8002630:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002634:	3302      	addmi	r3, #2
 8002636:	f8c9 3000 	strmi.w	r3, [r9]
 800263a:	6825      	ldr	r5, [r4, #0]
 800263c:	f015 0506 	ands.w	r5, r5, #6
 8002640:	d107      	bne.n	8002652 <_printf_common+0x52>
 8002642:	f104 0a19 	add.w	sl, r4, #25
 8002646:	68e3      	ldr	r3, [r4, #12]
 8002648:	f8d9 2000 	ldr.w	r2, [r9]
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	429d      	cmp	r5, r3
 8002650:	db2a      	blt.n	80026a8 <_printf_common+0xa8>
 8002652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002656:	6822      	ldr	r2, [r4, #0]
 8002658:	3300      	adds	r3, #0
 800265a:	bf18      	it	ne
 800265c:	2301      	movne	r3, #1
 800265e:	0692      	lsls	r2, r2, #26
 8002660:	d42f      	bmi.n	80026c2 <_printf_common+0xc2>
 8002662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002666:	4639      	mov	r1, r7
 8002668:	4630      	mov	r0, r6
 800266a:	47c0      	blx	r8
 800266c:	3001      	adds	r0, #1
 800266e:	d022      	beq.n	80026b6 <_printf_common+0xb6>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	68e5      	ldr	r5, [r4, #12]
 8002674:	f003 0306 	and.w	r3, r3, #6
 8002678:	2b04      	cmp	r3, #4
 800267a:	bf18      	it	ne
 800267c:	2500      	movne	r5, #0
 800267e:	f8d9 2000 	ldr.w	r2, [r9]
 8002682:	f04f 0900 	mov.w	r9, #0
 8002686:	bf08      	it	eq
 8002688:	1aad      	subeq	r5, r5, r2
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	6922      	ldr	r2, [r4, #16]
 800268e:	bf08      	it	eq
 8002690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002694:	4293      	cmp	r3, r2
 8002696:	bfc4      	itt	gt
 8002698:	1a9b      	subgt	r3, r3, r2
 800269a:	18ed      	addgt	r5, r5, r3
 800269c:	341a      	adds	r4, #26
 800269e:	454d      	cmp	r5, r9
 80026a0:	d11b      	bne.n	80026da <_printf_common+0xda>
 80026a2:	2000      	movs	r0, #0
 80026a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a8:	2301      	movs	r3, #1
 80026aa:	4652      	mov	r2, sl
 80026ac:	4639      	mov	r1, r7
 80026ae:	4630      	mov	r0, r6
 80026b0:	47c0      	blx	r8
 80026b2:	3001      	adds	r0, #1
 80026b4:	d103      	bne.n	80026be <_printf_common+0xbe>
 80026b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026be:	3501      	adds	r5, #1
 80026c0:	e7c1      	b.n	8002646 <_printf_common+0x46>
 80026c2:	2030      	movs	r0, #48	; 0x30
 80026c4:	18e1      	adds	r1, r4, r3
 80026c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026d0:	4422      	add	r2, r4
 80026d2:	3302      	adds	r3, #2
 80026d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026d8:	e7c3      	b.n	8002662 <_printf_common+0x62>
 80026da:	2301      	movs	r3, #1
 80026dc:	4622      	mov	r2, r4
 80026de:	4639      	mov	r1, r7
 80026e0:	4630      	mov	r0, r6
 80026e2:	47c0      	blx	r8
 80026e4:	3001      	adds	r0, #1
 80026e6:	d0e6      	beq.n	80026b6 <_printf_common+0xb6>
 80026e8:	f109 0901 	add.w	r9, r9, #1
 80026ec:	e7d7      	b.n	800269e <_printf_common+0x9e>
	...

080026f0 <_printf_i>:
 80026f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026f4:	4617      	mov	r7, r2
 80026f6:	7e0a      	ldrb	r2, [r1, #24]
 80026f8:	b085      	sub	sp, #20
 80026fa:	2a6e      	cmp	r2, #110	; 0x6e
 80026fc:	4698      	mov	r8, r3
 80026fe:	4606      	mov	r6, r0
 8002700:	460c      	mov	r4, r1
 8002702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002704:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002708:	f000 80bc 	beq.w	8002884 <_printf_i+0x194>
 800270c:	d81a      	bhi.n	8002744 <_printf_i+0x54>
 800270e:	2a63      	cmp	r2, #99	; 0x63
 8002710:	d02e      	beq.n	8002770 <_printf_i+0x80>
 8002712:	d80a      	bhi.n	800272a <_printf_i+0x3a>
 8002714:	2a00      	cmp	r2, #0
 8002716:	f000 80c8 	beq.w	80028aa <_printf_i+0x1ba>
 800271a:	2a58      	cmp	r2, #88	; 0x58
 800271c:	f000 808a 	beq.w	8002834 <_printf_i+0x144>
 8002720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002724:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002728:	e02a      	b.n	8002780 <_printf_i+0x90>
 800272a:	2a64      	cmp	r2, #100	; 0x64
 800272c:	d001      	beq.n	8002732 <_printf_i+0x42>
 800272e:	2a69      	cmp	r2, #105	; 0x69
 8002730:	d1f6      	bne.n	8002720 <_printf_i+0x30>
 8002732:	6821      	ldr	r1, [r4, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f011 0f80 	tst.w	r1, #128	; 0x80
 800273a:	d023      	beq.n	8002784 <_printf_i+0x94>
 800273c:	1d11      	adds	r1, r2, #4
 800273e:	6019      	str	r1, [r3, #0]
 8002740:	6813      	ldr	r3, [r2, #0]
 8002742:	e027      	b.n	8002794 <_printf_i+0xa4>
 8002744:	2a73      	cmp	r2, #115	; 0x73
 8002746:	f000 80b4 	beq.w	80028b2 <_printf_i+0x1c2>
 800274a:	d808      	bhi.n	800275e <_printf_i+0x6e>
 800274c:	2a6f      	cmp	r2, #111	; 0x6f
 800274e:	d02a      	beq.n	80027a6 <_printf_i+0xb6>
 8002750:	2a70      	cmp	r2, #112	; 0x70
 8002752:	d1e5      	bne.n	8002720 <_printf_i+0x30>
 8002754:	680a      	ldr	r2, [r1, #0]
 8002756:	f042 0220 	orr.w	r2, r2, #32
 800275a:	600a      	str	r2, [r1, #0]
 800275c:	e003      	b.n	8002766 <_printf_i+0x76>
 800275e:	2a75      	cmp	r2, #117	; 0x75
 8002760:	d021      	beq.n	80027a6 <_printf_i+0xb6>
 8002762:	2a78      	cmp	r2, #120	; 0x78
 8002764:	d1dc      	bne.n	8002720 <_printf_i+0x30>
 8002766:	2278      	movs	r2, #120	; 0x78
 8002768:	496f      	ldr	r1, [pc, #444]	; (8002928 <_printf_i+0x238>)
 800276a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800276e:	e064      	b.n	800283a <_printf_i+0x14a>
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002776:	1d11      	adds	r1, r2, #4
 8002778:	6019      	str	r1, [r3, #0]
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002780:	2301      	movs	r3, #1
 8002782:	e0a3      	b.n	80028cc <_printf_i+0x1dc>
 8002784:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002788:	f102 0104 	add.w	r1, r2, #4
 800278c:	6019      	str	r1, [r3, #0]
 800278e:	d0d7      	beq.n	8002740 <_printf_i+0x50>
 8002790:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da03      	bge.n	80027a0 <_printf_i+0xb0>
 8002798:	222d      	movs	r2, #45	; 0x2d
 800279a:	425b      	negs	r3, r3
 800279c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027a0:	4962      	ldr	r1, [pc, #392]	; (800292c <_printf_i+0x23c>)
 80027a2:	220a      	movs	r2, #10
 80027a4:	e017      	b.n	80027d6 <_printf_i+0xe6>
 80027a6:	6820      	ldr	r0, [r4, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027ae:	d003      	beq.n	80027b8 <_printf_i+0xc8>
 80027b0:	1d08      	adds	r0, r1, #4
 80027b2:	6018      	str	r0, [r3, #0]
 80027b4:	680b      	ldr	r3, [r1, #0]
 80027b6:	e006      	b.n	80027c6 <_printf_i+0xd6>
 80027b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027bc:	f101 0004 	add.w	r0, r1, #4
 80027c0:	6018      	str	r0, [r3, #0]
 80027c2:	d0f7      	beq.n	80027b4 <_printf_i+0xc4>
 80027c4:	880b      	ldrh	r3, [r1, #0]
 80027c6:	2a6f      	cmp	r2, #111	; 0x6f
 80027c8:	bf14      	ite	ne
 80027ca:	220a      	movne	r2, #10
 80027cc:	2208      	moveq	r2, #8
 80027ce:	4957      	ldr	r1, [pc, #348]	; (800292c <_printf_i+0x23c>)
 80027d0:	2000      	movs	r0, #0
 80027d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80027d6:	6865      	ldr	r5, [r4, #4]
 80027d8:	2d00      	cmp	r5, #0
 80027da:	60a5      	str	r5, [r4, #8]
 80027dc:	f2c0 809c 	blt.w	8002918 <_printf_i+0x228>
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	f020 0004 	bic.w	r0, r0, #4
 80027e6:	6020      	str	r0, [r4, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d13f      	bne.n	800286c <_printf_i+0x17c>
 80027ec:	2d00      	cmp	r5, #0
 80027ee:	f040 8095 	bne.w	800291c <_printf_i+0x22c>
 80027f2:	4675      	mov	r5, lr
 80027f4:	2a08      	cmp	r2, #8
 80027f6:	d10b      	bne.n	8002810 <_printf_i+0x120>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	07da      	lsls	r2, r3, #31
 80027fc:	d508      	bpl.n	8002810 <_printf_i+0x120>
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	6862      	ldr	r2, [r4, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	bfde      	ittt	le
 8002806:	2330      	movle	r3, #48	; 0x30
 8002808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800280c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002810:	ebae 0305 	sub.w	r3, lr, r5
 8002814:	6123      	str	r3, [r4, #16]
 8002816:	f8cd 8000 	str.w	r8, [sp]
 800281a:	463b      	mov	r3, r7
 800281c:	aa03      	add	r2, sp, #12
 800281e:	4621      	mov	r1, r4
 8002820:	4630      	mov	r0, r6
 8002822:	f7ff feed 	bl	8002600 <_printf_common>
 8002826:	3001      	adds	r0, #1
 8002828:	d155      	bne.n	80028d6 <_printf_i+0x1e6>
 800282a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282e:	b005      	add	sp, #20
 8002830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002834:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002838:	493c      	ldr	r1, [pc, #240]	; (800292c <_printf_i+0x23c>)
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002842:	f100 0504 	add.w	r5, r0, #4
 8002846:	601d      	str	r5, [r3, #0]
 8002848:	d001      	beq.n	800284e <_printf_i+0x15e>
 800284a:	6803      	ldr	r3, [r0, #0]
 800284c:	e002      	b.n	8002854 <_printf_i+0x164>
 800284e:	0655      	lsls	r5, r2, #25
 8002850:	d5fb      	bpl.n	800284a <_printf_i+0x15a>
 8002852:	8803      	ldrh	r3, [r0, #0]
 8002854:	07d0      	lsls	r0, r2, #31
 8002856:	bf44      	itt	mi
 8002858:	f042 0220 	orrmi.w	r2, r2, #32
 800285c:	6022      	strmi	r2, [r4, #0]
 800285e:	b91b      	cbnz	r3, 8002868 <_printf_i+0x178>
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	f022 0220 	bic.w	r2, r2, #32
 8002866:	6022      	str	r2, [r4, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	e7b1      	b.n	80027d0 <_printf_i+0xe0>
 800286c:	4675      	mov	r5, lr
 800286e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002872:	fb02 3310 	mls	r3, r2, r0, r3
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800287c:	4603      	mov	r3, r0
 800287e:	2800      	cmp	r0, #0
 8002880:	d1f5      	bne.n	800286e <_printf_i+0x17e>
 8002882:	e7b7      	b.n	80027f4 <_printf_i+0x104>
 8002884:	6808      	ldr	r0, [r1, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f010 0f80 	tst.w	r0, #128	; 0x80
 800288c:	6949      	ldr	r1, [r1, #20]
 800288e:	d004      	beq.n	800289a <_printf_i+0x1aa>
 8002890:	1d10      	adds	r0, r2, #4
 8002892:	6018      	str	r0, [r3, #0]
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	6019      	str	r1, [r3, #0]
 8002898:	e007      	b.n	80028aa <_printf_i+0x1ba>
 800289a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800289e:	f102 0004 	add.w	r0, r2, #4
 80028a2:	6018      	str	r0, [r3, #0]
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	d0f6      	beq.n	8002896 <_printf_i+0x1a6>
 80028a8:	8019      	strh	r1, [r3, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	4675      	mov	r5, lr
 80028ae:	6123      	str	r3, [r4, #16]
 80028b0:	e7b1      	b.n	8002816 <_printf_i+0x126>
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	1d11      	adds	r1, r2, #4
 80028b6:	6019      	str	r1, [r3, #0]
 80028b8:	6815      	ldr	r5, [r2, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	6862      	ldr	r2, [r4, #4]
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 fa94 	bl	8002dec <memchr>
 80028c4:	b108      	cbz	r0, 80028ca <_printf_i+0x1da>
 80028c6:	1b40      	subs	r0, r0, r5
 80028c8:	6060      	str	r0, [r4, #4]
 80028ca:	6863      	ldr	r3, [r4, #4]
 80028cc:	6123      	str	r3, [r4, #16]
 80028ce:	2300      	movs	r3, #0
 80028d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028d4:	e79f      	b.n	8002816 <_printf_i+0x126>
 80028d6:	6923      	ldr	r3, [r4, #16]
 80028d8:	462a      	mov	r2, r5
 80028da:	4639      	mov	r1, r7
 80028dc:	4630      	mov	r0, r6
 80028de:	47c0      	blx	r8
 80028e0:	3001      	adds	r0, #1
 80028e2:	d0a2      	beq.n	800282a <_printf_i+0x13a>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	079b      	lsls	r3, r3, #30
 80028e8:	d507      	bpl.n	80028fa <_printf_i+0x20a>
 80028ea:	2500      	movs	r5, #0
 80028ec:	f104 0919 	add.w	r9, r4, #25
 80028f0:	68e3      	ldr	r3, [r4, #12]
 80028f2:	9a03      	ldr	r2, [sp, #12]
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	429d      	cmp	r5, r3
 80028f8:	db05      	blt.n	8002906 <_printf_i+0x216>
 80028fa:	68e0      	ldr	r0, [r4, #12]
 80028fc:	9b03      	ldr	r3, [sp, #12]
 80028fe:	4298      	cmp	r0, r3
 8002900:	bfb8      	it	lt
 8002902:	4618      	movlt	r0, r3
 8002904:	e793      	b.n	800282e <_printf_i+0x13e>
 8002906:	2301      	movs	r3, #1
 8002908:	464a      	mov	r2, r9
 800290a:	4639      	mov	r1, r7
 800290c:	4630      	mov	r0, r6
 800290e:	47c0      	blx	r8
 8002910:	3001      	adds	r0, #1
 8002912:	d08a      	beq.n	800282a <_printf_i+0x13a>
 8002914:	3501      	adds	r5, #1
 8002916:	e7eb      	b.n	80028f0 <_printf_i+0x200>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1a7      	bne.n	800286c <_printf_i+0x17c>
 800291c:	780b      	ldrb	r3, [r1, #0]
 800291e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002926:	e765      	b.n	80027f4 <_printf_i+0x104>
 8002928:	08002ff2 	.word	0x08002ff2
 800292c:	08002fe1 	.word	0x08002fe1

08002930 <_sbrk_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	2300      	movs	r3, #0
 8002934:	4c05      	ldr	r4, [pc, #20]	; (800294c <_sbrk_r+0x1c>)
 8002936:	4605      	mov	r5, r0
 8002938:	4608      	mov	r0, r1
 800293a:	6023      	str	r3, [r4, #0]
 800293c:	f7fe f9bc 	bl	8000cb8 <_sbrk>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_sbrk_r+0x1a>
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	b103      	cbz	r3, 800294a <_sbrk_r+0x1a>
 8002948:	602b      	str	r3, [r5, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	200001fc 	.word	0x200001fc

08002950 <__sread>:
 8002950:	b510      	push	{r4, lr}
 8002952:	460c      	mov	r4, r1
 8002954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002958:	f000 faa4 	bl	8002ea4 <_read_r>
 800295c:	2800      	cmp	r0, #0
 800295e:	bfab      	itete	ge
 8002960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002962:	89a3      	ldrhlt	r3, [r4, #12]
 8002964:	181b      	addge	r3, r3, r0
 8002966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800296a:	bfac      	ite	ge
 800296c:	6563      	strge	r3, [r4, #84]	; 0x54
 800296e:	81a3      	strhlt	r3, [r4, #12]
 8002970:	bd10      	pop	{r4, pc}

08002972 <__swrite>:
 8002972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002976:	461f      	mov	r7, r3
 8002978:	898b      	ldrh	r3, [r1, #12]
 800297a:	4605      	mov	r5, r0
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	460c      	mov	r4, r1
 8002980:	4616      	mov	r6, r2
 8002982:	d505      	bpl.n	8002990 <__swrite+0x1e>
 8002984:	2302      	movs	r3, #2
 8002986:	2200      	movs	r2, #0
 8002988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298c:	f000 f9b8 	bl	8002d00 <_lseek_r>
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	4632      	mov	r2, r6
 8002994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800299e:	463b      	mov	r3, r7
 80029a0:	4628      	mov	r0, r5
 80029a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029a6:	f000 b869 	b.w	8002a7c <_write_r>

080029aa <__sseek>:
 80029aa:	b510      	push	{r4, lr}
 80029ac:	460c      	mov	r4, r1
 80029ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b2:	f000 f9a5 	bl	8002d00 <_lseek_r>
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	bf15      	itete	ne
 80029bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80029be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029c6:	81a3      	strheq	r3, [r4, #12]
 80029c8:	bf18      	it	ne
 80029ca:	81a3      	strhne	r3, [r4, #12]
 80029cc:	bd10      	pop	{r4, pc}

080029ce <__sclose>:
 80029ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d2:	f000 b8d3 	b.w	8002b7c <_close_r>
	...

080029d8 <__swbuf_r>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	460e      	mov	r6, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	4605      	mov	r5, r0
 80029e0:	b118      	cbz	r0, 80029ea <__swbuf_r+0x12>
 80029e2:	6983      	ldr	r3, [r0, #24]
 80029e4:	b90b      	cbnz	r3, 80029ea <__swbuf_r+0x12>
 80029e6:	f7ff fbe5 	bl	80021b4 <__sinit>
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <__swbuf_r+0x98>)
 80029ec:	429c      	cmp	r4, r3
 80029ee:	d12a      	bne.n	8002a46 <__swbuf_r+0x6e>
 80029f0:	686c      	ldr	r4, [r5, #4]
 80029f2:	69a3      	ldr	r3, [r4, #24]
 80029f4:	60a3      	str	r3, [r4, #8]
 80029f6:	89a3      	ldrh	r3, [r4, #12]
 80029f8:	071a      	lsls	r2, r3, #28
 80029fa:	d52e      	bpl.n	8002a5a <__swbuf_r+0x82>
 80029fc:	6923      	ldr	r3, [r4, #16]
 80029fe:	b363      	cbz	r3, 8002a5a <__swbuf_r+0x82>
 8002a00:	6923      	ldr	r3, [r4, #16]
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	b2f6      	uxtb	r6, r6
 8002a06:	1ac0      	subs	r0, r0, r3
 8002a08:	6963      	ldr	r3, [r4, #20]
 8002a0a:	4637      	mov	r7, r6
 8002a0c:	4298      	cmp	r0, r3
 8002a0e:	db04      	blt.n	8002a1a <__swbuf_r+0x42>
 8002a10:	4621      	mov	r1, r4
 8002a12:	4628      	mov	r0, r5
 8002a14:	f000 f94a 	bl	8002cac <_fflush_r>
 8002a18:	bb28      	cbnz	r0, 8002a66 <__swbuf_r+0x8e>
 8002a1a:	68a3      	ldr	r3, [r4, #8]
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	60a3      	str	r3, [r4, #8]
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	6022      	str	r2, [r4, #0]
 8002a28:	701e      	strb	r6, [r3, #0]
 8002a2a:	6963      	ldr	r3, [r4, #20]
 8002a2c:	4298      	cmp	r0, r3
 8002a2e:	d004      	beq.n	8002a3a <__swbuf_r+0x62>
 8002a30:	89a3      	ldrh	r3, [r4, #12]
 8002a32:	07db      	lsls	r3, r3, #31
 8002a34:	d519      	bpl.n	8002a6a <__swbuf_r+0x92>
 8002a36:	2e0a      	cmp	r6, #10
 8002a38:	d117      	bne.n	8002a6a <__swbuf_r+0x92>
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f000 f935 	bl	8002cac <_fflush_r>
 8002a42:	b190      	cbz	r0, 8002a6a <__swbuf_r+0x92>
 8002a44:	e00f      	b.n	8002a66 <__swbuf_r+0x8e>
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <__swbuf_r+0x9c>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d101      	bne.n	8002a50 <__swbuf_r+0x78>
 8002a4c:	68ac      	ldr	r4, [r5, #8]
 8002a4e:	e7d0      	b.n	80029f2 <__swbuf_r+0x1a>
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <__swbuf_r+0xa0>)
 8002a52:	429c      	cmp	r4, r3
 8002a54:	bf08      	it	eq
 8002a56:	68ec      	ldreq	r4, [r5, #12]
 8002a58:	e7cb      	b.n	80029f2 <__swbuf_r+0x1a>
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f000 f81f 	bl	8002aa0 <__swsetup_r>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d0cc      	beq.n	8002a00 <__swbuf_r+0x28>
 8002a66:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002a6a:	4638      	mov	r0, r7
 8002a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	08002f90 	.word	0x08002f90
 8002a74:	08002fb0 	.word	0x08002fb0
 8002a78:	08002f70 	.word	0x08002f70

08002a7c <_write_r>:
 8002a7c:	b538      	push	{r3, r4, r5, lr}
 8002a7e:	4605      	mov	r5, r0
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	2200      	movs	r2, #0
 8002a86:	4c05      	ldr	r4, [pc, #20]	; (8002a9c <_write_r+0x20>)
 8002a88:	6022      	str	r2, [r4, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f7fe f906 	bl	8000c9c <_write>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_write_r+0x1e>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_write_r+0x1e>
 8002a98:	602b      	str	r3, [r5, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	200001fc 	.word	0x200001fc

08002aa0 <__swsetup_r>:
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <__swsetup_r+0xcc>)
 8002aa2:	b570      	push	{r4, r5, r6, lr}
 8002aa4:	681d      	ldr	r5, [r3, #0]
 8002aa6:	4606      	mov	r6, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	b125      	cbz	r5, 8002ab6 <__swsetup_r+0x16>
 8002aac:	69ab      	ldr	r3, [r5, #24]
 8002aae:	b913      	cbnz	r3, 8002ab6 <__swsetup_r+0x16>
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f7ff fb7f 	bl	80021b4 <__sinit>
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <__swsetup_r+0xd0>)
 8002ab8:	429c      	cmp	r4, r3
 8002aba:	d10f      	bne.n	8002adc <__swsetup_r+0x3c>
 8002abc:	686c      	ldr	r4, [r5, #4]
 8002abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	0715      	lsls	r5, r2, #28
 8002ac6:	d42c      	bmi.n	8002b22 <__swsetup_r+0x82>
 8002ac8:	06d0      	lsls	r0, r2, #27
 8002aca:	d411      	bmi.n	8002af0 <__swsetup_r+0x50>
 8002acc:	2209      	movs	r2, #9
 8002ace:	6032      	str	r2, [r6, #0]
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad4:	81a3      	strh	r3, [r4, #12]
 8002ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <__swsetup_r+0xd4>)
 8002ade:	429c      	cmp	r4, r3
 8002ae0:	d101      	bne.n	8002ae6 <__swsetup_r+0x46>
 8002ae2:	68ac      	ldr	r4, [r5, #8]
 8002ae4:	e7eb      	b.n	8002abe <__swsetup_r+0x1e>
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <__swsetup_r+0xd8>)
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	bf08      	it	eq
 8002aec:	68ec      	ldreq	r4, [r5, #12]
 8002aee:	e7e6      	b.n	8002abe <__swsetup_r+0x1e>
 8002af0:	0751      	lsls	r1, r2, #29
 8002af2:	d512      	bpl.n	8002b1a <__swsetup_r+0x7a>
 8002af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002af6:	b141      	cbz	r1, 8002b0a <__swsetup_r+0x6a>
 8002af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002afc:	4299      	cmp	r1, r3
 8002afe:	d002      	beq.n	8002b06 <__swsetup_r+0x66>
 8002b00:	4630      	mov	r0, r6
 8002b02:	f000 f983 	bl	8002e0c <_free_r>
 8002b06:	2300      	movs	r3, #0
 8002b08:	6363      	str	r3, [r4, #52]	; 0x34
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b10:	81a3      	strh	r3, [r4, #12]
 8002b12:	2300      	movs	r3, #0
 8002b14:	6063      	str	r3, [r4, #4]
 8002b16:	6923      	ldr	r3, [r4, #16]
 8002b18:	6023      	str	r3, [r4, #0]
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	6923      	ldr	r3, [r4, #16]
 8002b24:	b94b      	cbnz	r3, 8002b3a <__swsetup_r+0x9a>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b30:	d003      	beq.n	8002b3a <__swsetup_r+0x9a>
 8002b32:	4621      	mov	r1, r4
 8002b34:	4630      	mov	r0, r6
 8002b36:	f000 f919 	bl	8002d6c <__smakebuf_r>
 8002b3a:	89a2      	ldrh	r2, [r4, #12]
 8002b3c:	f012 0301 	ands.w	r3, r2, #1
 8002b40:	d00c      	beq.n	8002b5c <__swsetup_r+0xbc>
 8002b42:	2300      	movs	r3, #0
 8002b44:	60a3      	str	r3, [r4, #8]
 8002b46:	6963      	ldr	r3, [r4, #20]
 8002b48:	425b      	negs	r3, r3
 8002b4a:	61a3      	str	r3, [r4, #24]
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	b953      	cbnz	r3, 8002b66 <__swsetup_r+0xc6>
 8002b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b58:	d1ba      	bne.n	8002ad0 <__swsetup_r+0x30>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	0792      	lsls	r2, r2, #30
 8002b5e:	bf58      	it	pl
 8002b60:	6963      	ldrpl	r3, [r4, #20]
 8002b62:	60a3      	str	r3, [r4, #8]
 8002b64:	e7f2      	b.n	8002b4c <__swsetup_r+0xac>
 8002b66:	2000      	movs	r0, #0
 8002b68:	e7f7      	b.n	8002b5a <__swsetup_r+0xba>
 8002b6a:	bf00      	nop
 8002b6c:	20000004 	.word	0x20000004
 8002b70:	08002f90 	.word	0x08002f90
 8002b74:	08002fb0 	.word	0x08002fb0
 8002b78:	08002f70 	.word	0x08002f70

08002b7c <_close_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	2300      	movs	r3, #0
 8002b80:	4c05      	ldr	r4, [pc, #20]	; (8002b98 <_close_r+0x1c>)
 8002b82:	4605      	mov	r5, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	f7fe f8b0 	bl	8000cec <_close>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d102      	bne.n	8002b96 <_close_r+0x1a>
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	b103      	cbz	r3, 8002b96 <_close_r+0x1a>
 8002b94:	602b      	str	r3, [r5, #0]
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
 8002b98:	200001fc 	.word	0x200001fc

08002b9c <__sflush_r>:
 8002b9c:	898a      	ldrh	r2, [r1, #12]
 8002b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	0710      	lsls	r0, r2, #28
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	d45a      	bmi.n	8002c60 <__sflush_r+0xc4>
 8002baa:	684b      	ldr	r3, [r1, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	dc05      	bgt.n	8002bbc <__sflush_r+0x20>
 8002bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	dc02      	bgt.n	8002bbc <__sflush_r+0x20>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bbe:	2e00      	cmp	r6, #0
 8002bc0:	d0f9      	beq.n	8002bb6 <__sflush_r+0x1a>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bc8:	682f      	ldr	r7, [r5, #0]
 8002bca:	602b      	str	r3, [r5, #0]
 8002bcc:	d033      	beq.n	8002c36 <__sflush_r+0x9a>
 8002bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	075a      	lsls	r2, r3, #29
 8002bd4:	d505      	bpl.n	8002be2 <__sflush_r+0x46>
 8002bd6:	6863      	ldr	r3, [r4, #4]
 8002bd8:	1ac0      	subs	r0, r0, r3
 8002bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bdc:	b10b      	cbz	r3, 8002be2 <__sflush_r+0x46>
 8002bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002be0:	1ac0      	subs	r0, r0, r3
 8002be2:	2300      	movs	r3, #0
 8002be4:	4602      	mov	r2, r0
 8002be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002be8:	6a21      	ldr	r1, [r4, #32]
 8002bea:	4628      	mov	r0, r5
 8002bec:	47b0      	blx	r6
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	d106      	bne.n	8002c02 <__sflush_r+0x66>
 8002bf4:	6829      	ldr	r1, [r5, #0]
 8002bf6:	291d      	cmp	r1, #29
 8002bf8:	d84b      	bhi.n	8002c92 <__sflush_r+0xf6>
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <__sflush_r+0x10c>)
 8002bfc:	40ca      	lsrs	r2, r1
 8002bfe:	07d6      	lsls	r6, r2, #31
 8002c00:	d547      	bpl.n	8002c92 <__sflush_r+0xf6>
 8002c02:	2200      	movs	r2, #0
 8002c04:	6062      	str	r2, [r4, #4]
 8002c06:	6922      	ldr	r2, [r4, #16]
 8002c08:	04d9      	lsls	r1, r3, #19
 8002c0a:	6022      	str	r2, [r4, #0]
 8002c0c:	d504      	bpl.n	8002c18 <__sflush_r+0x7c>
 8002c0e:	1c42      	adds	r2, r0, #1
 8002c10:	d101      	bne.n	8002c16 <__sflush_r+0x7a>
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	b903      	cbnz	r3, 8002c18 <__sflush_r+0x7c>
 8002c16:	6560      	str	r0, [r4, #84]	; 0x54
 8002c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c1a:	602f      	str	r7, [r5, #0]
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	d0ca      	beq.n	8002bb6 <__sflush_r+0x1a>
 8002c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c24:	4299      	cmp	r1, r3
 8002c26:	d002      	beq.n	8002c2e <__sflush_r+0x92>
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 f8ef 	bl	8002e0c <_free_r>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	6360      	str	r0, [r4, #52]	; 0x34
 8002c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c36:	6a21      	ldr	r1, [r4, #32]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	47b0      	blx	r6
 8002c3e:	1c41      	adds	r1, r0, #1
 8002c40:	d1c6      	bne.n	8002bd0 <__sflush_r+0x34>
 8002c42:	682b      	ldr	r3, [r5, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0c3      	beq.n	8002bd0 <__sflush_r+0x34>
 8002c48:	2b1d      	cmp	r3, #29
 8002c4a:	d001      	beq.n	8002c50 <__sflush_r+0xb4>
 8002c4c:	2b16      	cmp	r3, #22
 8002c4e:	d101      	bne.n	8002c54 <__sflush_r+0xb8>
 8002c50:	602f      	str	r7, [r5, #0]
 8002c52:	e7b0      	b.n	8002bb6 <__sflush_r+0x1a>
 8002c54:	89a3      	ldrh	r3, [r4, #12]
 8002c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5a:	81a3      	strh	r3, [r4, #12]
 8002c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c60:	690f      	ldr	r7, [r1, #16]
 8002c62:	2f00      	cmp	r7, #0
 8002c64:	d0a7      	beq.n	8002bb6 <__sflush_r+0x1a>
 8002c66:	0793      	lsls	r3, r2, #30
 8002c68:	bf18      	it	ne
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	680e      	ldr	r6, [r1, #0]
 8002c6e:	bf08      	it	eq
 8002c70:	694b      	ldreq	r3, [r1, #20]
 8002c72:	eba6 0807 	sub.w	r8, r6, r7
 8002c76:	600f      	str	r7, [r1, #0]
 8002c78:	608b      	str	r3, [r1, #8]
 8002c7a:	f1b8 0f00 	cmp.w	r8, #0
 8002c7e:	dd9a      	ble.n	8002bb6 <__sflush_r+0x1a>
 8002c80:	4643      	mov	r3, r8
 8002c82:	463a      	mov	r2, r7
 8002c84:	6a21      	ldr	r1, [r4, #32]
 8002c86:	4628      	mov	r0, r5
 8002c88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c8a:	47b0      	blx	r6
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	dc07      	bgt.n	8002ca0 <__sflush_r+0x104>
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c96:	81a3      	strh	r3, [r4, #12]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ca0:	4407      	add	r7, r0
 8002ca2:	eba8 0800 	sub.w	r8, r8, r0
 8002ca6:	e7e8      	b.n	8002c7a <__sflush_r+0xde>
 8002ca8:	20400001 	.word	0x20400001

08002cac <_fflush_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	690b      	ldr	r3, [r1, #16]
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	b1db      	cbz	r3, 8002cee <_fflush_r+0x42>
 8002cb6:	b118      	cbz	r0, 8002cc0 <_fflush_r+0x14>
 8002cb8:	6983      	ldr	r3, [r0, #24]
 8002cba:	b90b      	cbnz	r3, 8002cc0 <_fflush_r+0x14>
 8002cbc:	f7ff fa7a 	bl	80021b4 <__sinit>
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <_fflush_r+0x48>)
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	d109      	bne.n	8002cda <_fflush_r+0x2e>
 8002cc6:	686c      	ldr	r4, [r5, #4]
 8002cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ccc:	b17b      	cbz	r3, 8002cee <_fflush_r+0x42>
 8002cce:	4621      	mov	r1, r4
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cd6:	f7ff bf61 	b.w	8002b9c <__sflush_r>
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <_fflush_r+0x4c>)
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	d101      	bne.n	8002ce4 <_fflush_r+0x38>
 8002ce0:	68ac      	ldr	r4, [r5, #8]
 8002ce2:	e7f1      	b.n	8002cc8 <_fflush_r+0x1c>
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <_fflush_r+0x50>)
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	bf08      	it	eq
 8002cea:	68ec      	ldreq	r4, [r5, #12]
 8002cec:	e7ec      	b.n	8002cc8 <_fflush_r+0x1c>
 8002cee:	2000      	movs	r0, #0
 8002cf0:	bd38      	pop	{r3, r4, r5, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08002f90 	.word	0x08002f90
 8002cf8:	08002fb0 	.word	0x08002fb0
 8002cfc:	08002f70 	.word	0x08002f70

08002d00 <_lseek_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4605      	mov	r5, r0
 8002d04:	4608      	mov	r0, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4c05      	ldr	r4, [pc, #20]	; (8002d20 <_lseek_r+0x20>)
 8002d0c:	6022      	str	r2, [r4, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f7fd fff6 	bl	8000d00 <_lseek>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_lseek_r+0x1e>
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_lseek_r+0x1e>
 8002d1c:	602b      	str	r3, [r5, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	200001fc 	.word	0x200001fc

08002d24 <__swhatbuf_r>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	460e      	mov	r6, r1
 8002d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d2c:	b090      	sub	sp, #64	; 0x40
 8002d2e:	2900      	cmp	r1, #0
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	da07      	bge.n	8002d46 <__swhatbuf_r+0x22>
 8002d36:	2300      	movs	r3, #0
 8002d38:	602b      	str	r3, [r5, #0]
 8002d3a:	89b3      	ldrh	r3, [r6, #12]
 8002d3c:	061a      	lsls	r2, r3, #24
 8002d3e:	d410      	bmi.n	8002d62 <__swhatbuf_r+0x3e>
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	e00e      	b.n	8002d64 <__swhatbuf_r+0x40>
 8002d46:	aa01      	add	r2, sp, #4
 8002d48:	f000 f8be 	bl	8002ec8 <_fstat_r>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	dbf2      	blt.n	8002d36 <__swhatbuf_r+0x12>
 8002d50:	9a02      	ldr	r2, [sp, #8]
 8002d52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d5a:	425a      	negs	r2, r3
 8002d5c:	415a      	adcs	r2, r3
 8002d5e:	602a      	str	r2, [r5, #0]
 8002d60:	e7ee      	b.n	8002d40 <__swhatbuf_r+0x1c>
 8002d62:	2340      	movs	r3, #64	; 0x40
 8002d64:	2000      	movs	r0, #0
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	b010      	add	sp, #64	; 0x40
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}

08002d6c <__smakebuf_r>:
 8002d6c:	898b      	ldrh	r3, [r1, #12]
 8002d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d70:	079d      	lsls	r5, r3, #30
 8002d72:	4606      	mov	r6, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	d507      	bpl.n	8002d88 <__smakebuf_r+0x1c>
 8002d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	6123      	str	r3, [r4, #16]
 8002d80:	2301      	movs	r3, #1
 8002d82:	6163      	str	r3, [r4, #20]
 8002d84:	b002      	add	sp, #8
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	ab01      	add	r3, sp, #4
 8002d8a:	466a      	mov	r2, sp
 8002d8c:	f7ff ffca 	bl	8002d24 <__swhatbuf_r>
 8002d90:	9900      	ldr	r1, [sp, #0]
 8002d92:	4605      	mov	r5, r0
 8002d94:	4630      	mov	r0, r6
 8002d96:	f7ff fa97 	bl	80022c8 <_malloc_r>
 8002d9a:	b948      	cbnz	r0, 8002db0 <__smakebuf_r+0x44>
 8002d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002da0:	059a      	lsls	r2, r3, #22
 8002da2:	d4ef      	bmi.n	8002d84 <__smakebuf_r+0x18>
 8002da4:	f023 0303 	bic.w	r3, r3, #3
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	e7e3      	b.n	8002d78 <__smakebuf_r+0xc>
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <__smakebuf_r+0x7c>)
 8002db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	6020      	str	r0, [r4, #0]
 8002db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	9b00      	ldr	r3, [sp, #0]
 8002dc0:	6120      	str	r0, [r4, #16]
 8002dc2:	6163      	str	r3, [r4, #20]
 8002dc4:	9b01      	ldr	r3, [sp, #4]
 8002dc6:	b15b      	cbz	r3, 8002de0 <__smakebuf_r+0x74>
 8002dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dcc:	4630      	mov	r0, r6
 8002dce:	f000 f88d 	bl	8002eec <_isatty_r>
 8002dd2:	b128      	cbz	r0, 8002de0 <__smakebuf_r+0x74>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	81a3      	strh	r3, [r4, #12]
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	431d      	orrs	r5, r3
 8002de4:	81a5      	strh	r5, [r4, #12]
 8002de6:	e7cd      	b.n	8002d84 <__smakebuf_r+0x18>
 8002de8:	08002135 	.word	0x08002135

08002dec <memchr>:
 8002dec:	b510      	push	{r4, lr}
 8002dee:	b2c9      	uxtb	r1, r1
 8002df0:	4402      	add	r2, r0
 8002df2:	4290      	cmp	r0, r2
 8002df4:	4603      	mov	r3, r0
 8002df6:	d101      	bne.n	8002dfc <memchr+0x10>
 8002df8:	2000      	movs	r0, #0
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	781c      	ldrb	r4, [r3, #0]
 8002dfe:	3001      	adds	r0, #1
 8002e00:	428c      	cmp	r4, r1
 8002e02:	d1f6      	bne.n	8002df2 <memchr+0x6>
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <__malloc_lock>:
 8002e08:	4770      	bx	lr

08002e0a <__malloc_unlock>:
 8002e0a:	4770      	bx	lr

08002e0c <_free_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d043      	beq.n	8002e9c <_free_r+0x90>
 8002e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e18:	1f0c      	subs	r4, r1, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bfb8      	it	lt
 8002e1e:	18e4      	addlt	r4, r4, r3
 8002e20:	f7ff fff2 	bl	8002e08 <__malloc_lock>
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <_free_r+0x94>)
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	4610      	mov	r0, r2
 8002e2a:	b933      	cbnz	r3, 8002e3a <_free_r+0x2e>
 8002e2c:	6063      	str	r3, [r4, #4]
 8002e2e:	6014      	str	r4, [r2, #0]
 8002e30:	4628      	mov	r0, r5
 8002e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e36:	f7ff bfe8 	b.w	8002e0a <__malloc_unlock>
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	d90b      	bls.n	8002e56 <_free_r+0x4a>
 8002e3e:	6821      	ldr	r1, [r4, #0]
 8002e40:	1862      	adds	r2, r4, r1
 8002e42:	4293      	cmp	r3, r2
 8002e44:	bf01      	itttt	eq
 8002e46:	681a      	ldreq	r2, [r3, #0]
 8002e48:	685b      	ldreq	r3, [r3, #4]
 8002e4a:	1852      	addeq	r2, r2, r1
 8002e4c:	6022      	streq	r2, [r4, #0]
 8002e4e:	6063      	str	r3, [r4, #4]
 8002e50:	6004      	str	r4, [r0, #0]
 8002e52:	e7ed      	b.n	8002e30 <_free_r+0x24>
 8002e54:	4613      	mov	r3, r2
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	b10a      	cbz	r2, 8002e5e <_free_r+0x52>
 8002e5a:	42a2      	cmp	r2, r4
 8002e5c:	d9fa      	bls.n	8002e54 <_free_r+0x48>
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	1858      	adds	r0, r3, r1
 8002e62:	42a0      	cmp	r0, r4
 8002e64:	d10b      	bne.n	8002e7e <_free_r+0x72>
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	4401      	add	r1, r0
 8002e6a:	1858      	adds	r0, r3, r1
 8002e6c:	4282      	cmp	r2, r0
 8002e6e:	6019      	str	r1, [r3, #0]
 8002e70:	d1de      	bne.n	8002e30 <_free_r+0x24>
 8002e72:	6810      	ldr	r0, [r2, #0]
 8002e74:	6852      	ldr	r2, [r2, #4]
 8002e76:	4401      	add	r1, r0
 8002e78:	6019      	str	r1, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	e7d8      	b.n	8002e30 <_free_r+0x24>
 8002e7e:	d902      	bls.n	8002e86 <_free_r+0x7a>
 8002e80:	230c      	movs	r3, #12
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	e7d4      	b.n	8002e30 <_free_r+0x24>
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	1821      	adds	r1, r4, r0
 8002e8a:	428a      	cmp	r2, r1
 8002e8c:	bf01      	itttt	eq
 8002e8e:	6811      	ldreq	r1, [r2, #0]
 8002e90:	6852      	ldreq	r2, [r2, #4]
 8002e92:	1809      	addeq	r1, r1, r0
 8002e94:	6021      	streq	r1, [r4, #0]
 8002e96:	6062      	str	r2, [r4, #4]
 8002e98:	605c      	str	r4, [r3, #4]
 8002e9a:	e7c9      	b.n	8002e30 <_free_r+0x24>
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000009c 	.word	0x2000009c

08002ea4 <_read_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	2200      	movs	r2, #0
 8002eae:	4c05      	ldr	r4, [pc, #20]	; (8002ec4 <_read_r+0x20>)
 8002eb0:	6022      	str	r2, [r4, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f7fd fee4 	bl	8000c80 <_read>
 8002eb8:	1c43      	adds	r3, r0, #1
 8002eba:	d102      	bne.n	8002ec2 <_read_r+0x1e>
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	b103      	cbz	r3, 8002ec2 <_read_r+0x1e>
 8002ec0:	602b      	str	r3, [r5, #0]
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	200001fc 	.word	0x200001fc

08002ec8 <_fstat_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4c06      	ldr	r4, [pc, #24]	; (8002ee8 <_fstat_r+0x20>)
 8002ece:	4605      	mov	r5, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	f7fd ff0c 	bl	8000cf2 <_fstat>
 8002eda:	1c43      	adds	r3, r0, #1
 8002edc:	d102      	bne.n	8002ee4 <_fstat_r+0x1c>
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	b103      	cbz	r3, 8002ee4 <_fstat_r+0x1c>
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	bd38      	pop	{r3, r4, r5, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200001fc 	.word	0x200001fc

08002eec <_isatty_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4c05      	ldr	r4, [pc, #20]	; (8002f08 <_isatty_r+0x1c>)
 8002ef2:	4605      	mov	r5, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	6023      	str	r3, [r4, #0]
 8002ef8:	f7fd ff00 	bl	8000cfc <_isatty>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_isatty_r+0x1a>
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_isatty_r+0x1a>
 8002f04:	602b      	str	r3, [r5, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	200001fc 	.word	0x200001fc

08002f0c <_init>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr

08002f18 <_fini>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr
